<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>fusion360笔记</title>
      <link href="/2023/07/19/fusion360%E7%AC%94%E8%AE%B0/"/>
      <url>/2023/07/19/fusion360%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="用户参数"><a href="#用户参数" class="headerlink" title="用户参数"></a>用户参数</h2><p>用户参数就和编程中的变量一样，在修改-更改参数-新增用户参数 就能添加参数了。</p><p>在应用中可以直接打出参数定义的名字就能使用，也可以使用各种计算来灵活使用。</p><p>建模过程中，最好都能实现约束，通过长度、角度等限制将图形约束起来，并且配合用户参数来画图，将来若是参数有变化，修改用户参数，图形就能随着变化。</p><h2 id="构造平面"><a href="#构造平面" class="headerlink" title="构造平面"></a>构造平面</h2><p>构造中可以通过很多方式构造平面，如偏移平面，中间平面等。可以用来配合其他操作。</p>]]></content>
      
      
      <categories>
          
          <category> 3D建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 3D建模 </tag>
            
            <tag> Fusion360 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>车标科普</title>
      <link href="/2023/07/16/%E8%BD%A6%E6%A0%87%E7%A7%91%E6%99%AE/"/>
      <url>/2023/07/16/%E8%BD%A6%E6%A0%87%E7%A7%91%E6%99%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="中国"><a href="#中国" class="headerlink" title="中国"></a>中国</h2><p><img src="/images/SoftKnowledge/CarLogo/中国车标.png" alt="中国车标.png"></p><h3 id="吉利"><a href="#吉利" class="headerlink" title="吉利"></a>吉利</h3><p>吉利新车标源于六块腹肌的创意灵感，腹肌给人的感觉就是年轻、阳光和力量。寓意吉利发展历程虽短，但却是年轻的与积极向上的品牌，有着美好未来的企业。吉利标识内有六块腹肌组成，蓝色宝石代表了蔚蓝的天空，黑色宝石寓意广阔的大地，双色宝石的组合象征吉利汽车驰骋天地之间，走遍世界的每个角落。</p><p>隶属公司：浙江吉利控股集团</p><p>成立时间：1986</p><p>创 始 人：李书福</p><h3 id="比亚迪"><a href="#比亚迪" class="headerlink" title="比亚迪"></a>比亚迪</h3><p>比亚迪LOGO由两个同心的内外椭圆构成，象征比亚迪与合作伙伴一路同驰骋。内椭圆等分为蓝天白云两部分，突出比亚迪打造节能环保汽车的意志。两个椭圆间的黑色椭圆带中镶嵌的“BYD”，展现比亚迪立足科技的理念。整体的椭圆形结构，彰显比亚迪既是勇立潮头的大船，更是孕育自主品牌的摇篮。</p><p>隶属公司：比亚迪股份有限公司</p><p>成立时间：1995</p><p>创 始 人：王传福</p><h3 id="长城"><a href="#长城" class="headerlink" title="长城"></a>长城</h3><p>椭圆外形——立足中国，走向世界</p><p>烽火台形象——中国传统文化象征</p><p>剑锋箭头——充满活力，蒸蒸日上，敢于亮剑，无坚不摧</p><p>立体“1”——快速反应，永争第一</p><p>隶属公司：长城汽车股份有限公司成立</p><p>时间：1984</p><h3 id="广汽"><a href="#广汽" class="headerlink" title="广汽"></a>广汽</h3><p>汽传祺车标为“G”形LOGO，是广汽集团英文缩写“GAC”的首字母。“G”是由广汽集团英文缩写“GAC”的首字母“G”演变而来，既是对“至精志广”的全新演绎，也代表着全球化（Global）、英才（Genius）、荣耀（Glory）、卓越（Greatness）和信诺（Guarantee）。</p><p>隶属公司：广州汽车集团股份有限公司</p><p>成立时间：2010-12</p><h3 id="埃安"><a href="#埃安" class="headerlink" title="埃安"></a>埃安</h3><p>别名：AION</p><p>隶属公司：广州汽车集团股份有限公司</p><p>成立时间：2017-07-28</p><h3 id="理想"><a href="#理想" class="headerlink" title="理想"></a>理想</h3><p>想智造的英文品牌名称为“LEADING IDEAL”，品牌LOGO“LI”灵感来自英文名称LEADING IDEAL的首字母。</p><p>隶属公司：车和家汽车公司</p><p>创 始 人：李想</p><h3 id="蔚来"><a href="#蔚来" class="headerlink" title="蔚来"></a>蔚来</h3><p>蔚来，寓意“Blue Sky Coming”，标志的上下两部分分别象征我们的愿景和行动：上半部分代表天空，象征开放、未来与目标；下半部分代表延伸向地平线的路面，象征方向、行动与向前的动力。</p><p>隶属公司：上海蔚来汽车有限公司</p><p>成立时间：2014-11</p><p>创 始 人：李斌</p><h3 id="小鹏"><a href="#小鹏" class="headerlink" title="小鹏"></a>小鹏</h3><p>小鹏汽车logo主要由xpeng首字母X为灵感变设计的。</p><p>隶属公司：广州橙行智动汽车科技有限公司</p><p>成立时间：2014</p><p>创 始 人：何小鹏、夏珩、何涛</p><h3 id="奇瑞"><a href="#奇瑞" class="headerlink" title="奇瑞"></a>奇瑞</h3><p>标志的整体是英文字母CAC一种艺术化变形；<br>CAC即英文CHERY AUTOMOBILE CORPORATION LIMITED的缩写，中文意思是奇瑞汽车有限公司；<br>标志中间A为一变体的“人”字，预示着公司以人为本的经营理念；</p><p>徽标两边的C字向上环绕，如同人的两个臂膀，象征着一种团结和力量，环绕成地球型的椭圆状；中间的A在椭圆上方的断开处向上延伸，寓意奇瑞公司发展无穷，潜力无限，追求无限；</p><p>隶属公司：奇瑞汽车股份有限公司</p><p>成立时间：1997-1-8</p><p>创 始 人：尹同耀</p><h3 id="一汽"><a href="#一汽" class="headerlink" title="一汽"></a>一汽</h3><p>一汽车标取第一汽车中“一汽”为核心元素,经组合、演变,构成“雄鹰”视觉景象。寓意为第一汽车搏击长空、展翅翱翔。</p><p>隶属公司：中国第一汽车集团公司</p><p>成立时间：1953-7-15</p><h3 id="威马"><a href="#威马" class="headerlink" title="威马"></a>威马</h3><p>LOGO的中心由五个满格电量的柱状波组成能量信号，分别代表威马的五个支柱：云服务（大数据互联，先你所想，唯你所用）、平台（威马ID联动每位用户的出行体验）、人（人为本提供各类专属出行服务）、汽车（技与品质兼备的智能电动汽车）和多渠道（全触点新零售体验）。</p><p>隶属公司：威马汽车科技集团有限公司</p><p>成立时间：2015</p><p>创 始 人：沈晖</p><h3 id="东风"><a href="#东风" class="headerlink" title="东风"></a>东风</h3><p>东风汽车车标，以艺术变形手法，取燕子凌空飞翔时的剪形尾羽作为图案基础，采用了含蓄的表现手法。主要含意是双燕舞东风。它格调新颖，寓意深远，使人自然联想到东风送暖，春光明媚，神州大地生机盎然的景象。</p><p>隶属公司：东风汽车公司</p><p>成立时间：1969</p><h2 id="德国"><a href="#德国" class="headerlink" title="德国"></a>德国</h2><p><img src="/images/SoftKnowledge/CarLogo/德国车标.png" alt="德国车标.png"></p><h3 id="奥迪"><a href="#奥迪" class="headerlink" title="奥迪"></a>奥迪</h3><p>标志为四个圆环，代表着合并前的四家公司。这些公司曾经是自行车、摩托车及小客车的生产厂家。由于该公司原是由4家公司合并而成，因此每一环都是其中一个公司的象征。</p><p>隶属公司：大众汽车公司子公司</p><p>成立时间：1909-6-16</p><p>创 始 人：奥古斯特·霍希</p><h3 id="奔驰"><a href="#奔驰" class="headerlink" title="奔驰"></a>奔驰</h3><p>1909年6月，戴姆勒公司申请登记了“三叉星”做为轿车的标志，象征着陆上、水上和空中的机械化。1916年在它的四周加上了一个圆圈，在圆的上方镶嵌了4个小星，下面有梅赛德斯“Mercedes”字样。“梅赛德斯”是幸福的意思，意为戴姆勒生产的汽车将为车主们带来幸福。</p><p>隶属公司：戴姆勒</p><p>成立时间：1871</p><p>创 始 人：卡尔·奔驰、戈特利布·戴姆勒</p><h3 id="宝马"><a href="#宝马" class="headerlink" title="宝马"></a>宝马</h3><p>B.M.W.是巴伐利亚汽车制造厂的意思，标志的色彩和组合来自宝马所在地巴伐利亚州的州徽（在前面宝马标志的旁边）。宝马汽车公司是以生产航空发动机开始创业的,因此标志上的蓝色为天空,白色为螺旋桨。蓝白标记对称图形,同时也是公司所在地巴伐利亚州的州徽。在中文结合汉语拼音的情况下，诞生了另一种说法BMW为“别摸我”的简写，象征此车尊贵无比，最好别摸。</p><p>隶属公司：巴伐利亚机械制造厂股份公司</p><p>成立时间：1916-3-7</p><p>创 始 人：吉斯坦·奥托(Gustan Otto)</p><h3 id="大众"><a href="#大众" class="headerlink" title="大众"></a>大众</h3><p>大众汽车公司的德文VolksWagenwerk，意为大众使用的汽车，标志中的VW为全称中头一个字母。标志象是由三个用中指和食指作出的“V”组成，表示大众公司及其产品必胜－必胜－必胜。</p><p>隶属公司：大众集团</p><p>成立时间：1937</p><p>创 始 人：费尔迪南特·波尔舍</p><h3 id="保时捷"><a href="#保时捷" class="headerlink" title="保时捷"></a>保时捷</h3><p>举世熟知的porsche盾徽，是1953年由费利·保时捷博士（Dr.FenyPorsche）所构思。跃动的黑马象征porsche惊人的爆发力，正中央stuttgart字样，代表保时捷公司的所在地；四周厂徽取自巴登佛登堡州（badenwurttemberg）州徽，并镶以德国国旗黑、红、黄三色，共同构成一面令人热血沸腾的盾徽。</p><p>隶属公司：大众集团</p><p>成立时间：1931</p><p>创 始 人：费迪南德·保时捷</p><h3 id="迈巴赫"><a href="#迈巴赫" class="headerlink" title="迈巴赫"></a>迈巴赫</h3><p>具有传奇色彩的品牌标志由2个交叉的M，围绕在一个球面三角形里组成，新的轿车将仍采用这个经典的标志，仅仅不同的是，以前，双M代表“迈巴赫汽车”，现在，双M意味着“迈巴赫制造”。</p><p>隶属公司：德国戴姆勒·奔驰汽车集团</p><p>成立时间：1921</p><p>创 始 人：威廉·迈巴赫</p><h2 id="日本"><a href="#日本" class="headerlink" title="日本"></a>日本</h2><p><img src="/images/SoftKnowledge/CarLogo/日本车标.png" alt="日本车标.png"></p><h3 id="本田"><a href="#本田" class="headerlink" title="本田"></a>本田</h3><p>“H”是“本田”汽车和“本田”摩托车的图形商标，是“本田”日文拼音“HONDA”的第一个大写字母。</p><p>隶属公司：本田株式会社</p><p>成立时间：1946-10</p><p>创 始 人：本田宗一郎</p><h3 id="丰田"><a href="#丰田" class="headerlink" title="丰田"></a>丰田</h3><p>丰田公司的三个椭圆的标志是从1990年初开始使用的。标志中的大椭圆代表地球，中间由两个椭圆垂直组合成一个T字，代表丰田公司。它象征丰田公司立足于未来，对未来的信心和雄心，还象征着丰田公司立足于顾客，对顾客的保证，象征着用户的心和汽车厂家的心是连在一起的，具有相互信赖感，同时喻示着丰田的高超技术和革新潜力。</p><p>隶属公司：丰田汽车集团</p><p>成立时间：1937-8-28</p><p>创 始 人：丰田喜一郎</p><h3 id="日产"><a href="#日产" class="headerlink" title="日产"></a>日产</h3><p>图形商标是将NISSAN（日语“日产”两个字的罗马音形式）放在一个火红的太阳上，简明扼要地表明了公司名称，突出了所在国家的形象，这在汽车商标文化中独树一帜。</p><p>隶属公司：日产汽车公司</p><p>成立时间：1933</p><p>创 始 人：田建治郎</p><h3 id="雷克萨斯"><a href="#雷克萨斯" class="headerlink" title="雷克萨斯"></a>雷克萨斯</h3><p>用椭圆环绕的L字母，根据美国丰田汽车销售公司的官方说法，这个椭圆弧度依照精确的数学公式修饰</p><p>隶属公司：丰田汽车公司</p><p>成立时间：1983</p><h3 id="英菲尼迪"><a href="#英菲尼迪" class="headerlink" title="英菲尼迪"></a>英菲尼迪</h3><p>Infiniti(英菲尼迪)的椭圆形标志表现的是一条无限延伸的道路。椭圆曲线代表无限扩张之意，也象征着“全世界”;两条直线代表通往巅峰的道路，象征无尽的发展。</p><p>隶属公司：日产汽车公司</p><p>成立时间：1989</p><h3 id="马自达"><a href="#马自达" class="headerlink" title="马自达"></a>马自达</h3><p>最初马自达汽车标志图案中的“m”就是松田拼音的第一个字母，采用英文拼音“mazda”为其标志。自马自达与福特合作之后采用了新的标志，崭新的设计图案意味着马自达要展翅高飞，不断技术突破，以无穷的创意和真诚的服务，勇闯车坛顶峰，迈向新世纪。</p><p>隶属公司：马自达汽车有限公司</p><p>成立时间：1920</p><p>创 始 人：松田重次郎</p><h3 id="斯巴鲁"><a href="#斯巴鲁" class="headerlink" title="斯巴鲁"></a>斯巴鲁</h3><p>“斯巴鲁”日本语意思是联合,其企业标志是昴宿星团的六连星，并且也是”斯巴鲁”汽车的标志。昴宿星团有七颗肉眼可见的蓝色的星星，”斯巴鲁”的标志代表着第二次世界大战后，五个独立的公司一起组成了现今的”斯巴鲁”。”斯巴鲁”汽车拥有独特的技术，尤其是要指出的是其水平对置发动机和全时四轮驱动系统。”</p><p>隶属公司：富士重工业株式会社</p><p>成立时间：1953</p><h3 id="三菱"><a href="#三菱" class="headerlink" title="三菱"></a>三菱</h3><p>钻石是晶体结构中最完美的组合，而菱形是钻石切割技艺的颠峰挑战。日本三菱汽车以三枚菱形钻石为标志，正为突显其蕴含在雅致的单纯性中的深邃灿烂光华－菱钻式的造车艺术。</p><p>隶属公司：三菱集团</p><p>成立时间：1970-4-22</p><p>创 始 人：岩崎弥太郎</p><h3 id="铃木"><a href="#铃木" class="headerlink" title="铃木"></a>铃木</h3><p>铃木标志图案中的“S”是“SUZUKI”的第一个大写字母，它给人以无穷力量的感觉，象征无限发展的铃木汽车公司。</p><p>隶属公司：铃木公司</p><p>成立时间：1920</p><h2 id="美国"><a href="#美国" class="headerlink" title="美国"></a>美国</h2><p><img src="/images/SoftKnowledge/CarLogo/美国车标.png" alt="美国车标.png"></p><h3 id="福特"><a href="#福特" class="headerlink" title="福特"></a>福特</h3><p>福特生前十分喜爱动物。1911年，商标设计者为了迎合亨利·福特的嗜好，就将英文”Ford”设计成为形似奔跑的白兔形象，一博福特的欢心。福特汽车公司的商标是蓝底白字的英文”Ford”字样，被艺术化了的”Ford”形似活泼可爱、充满活力、美观大方的小白兔。</p><p>隶属公司：美国福特汽车公司</p><p>成立时间：1903</p><p>创 始 人：福特</p><h3 id="别克"><a href="#别克" class="headerlink" title="别克"></a>别克</h3><p>别克（BUICK）商标中那形似“三颗子弹”的图案为其图形商标，它是别克分部的标志。它被安装在汽车散器格栅上。图中那三颗颜色不同（从左到右：红、白、蓝三种颜色）并依次排列在不同高度位置上的子弹，给人一种积极进取、不断攀登的感觉；</p><p>隶属公司：美国通用汽车公司</p><p>成立时间：1904</p><p>创 始 人：大卫·别克</p><h3 id="Jeep"><a href="#Jeep" class="headerlink" title="Jeep"></a>Jeep</h3><p>Jeep从1950年注册为国际性商标，已经成为全球最著名的消费品牌之一，并且已经成为越野性能的国际代名词，Jeep品牌一直象征着真正的四轮驱动性能、创新技术和持续改进。</p><p>隶属公司：克莱斯勒集团有限责任公司</p><p>成立时间：1941</p><h3 id="凯迪拉克"><a href="#凯迪拉克" class="headerlink" title="凯迪拉克"></a>凯迪拉克</h3><p>凯迪拉克徽标可谓是其精神内涵的集中体现，著名的花冠盾形取自安东尼(德)凯迪拉克的族徽，是典型的贵族标志，既表现了底特律城创始人的勇气和荣誉，同时也象征着其在汽车行业中的领导地位。选用“凯迪拉克”之名是为了向法国的皇家贵族、探险家、美国底特律城的创始人安东尼·门斯·凯迪拉克表示敬意。</p><p>凯迪拉克商标是凯迪拉克家族在古代的宗教战争中，使用的“冠”和“盾”型的纹章图案。“冠”上的七颗珍珠表示凯迪拉克家族具有皇家贵族血统，即凯迪拉克家族是贵族。“盾”象征着凯迪拉克军队是一支金戈铁马、英勇善战、攻无不克、无坚不摧的英武之师。“盾”被两根深褐色棒平分为四个等分。</p><p>隶属公司：美国通用公司</p><p>成立时间：1902</p><p>创 始 人：亨利·利兰</p><h3 id="特斯拉"><a href="#特斯拉" class="headerlink" title="特斯拉"></a>特斯拉</h3><p>Tesla品牌的首字母“T”，其实这个“T”意指物理学家尼古拉·特斯拉，（尼古拉 特斯拉，交流电动机的发明者，百年不遇的旷世奇才） 也就是特斯拉公司的命名来由。从表面上看，特斯拉标志只是一个简单的“T”字，它代表了公司产品。实际上还有另一层意思，“T”还象征着电力发动机的横截面。</p><p>“T”字标志的主体代表着从发动机转子伸出的一根杆子，而上面的第二根线条代表着定子。特斯拉标志呈圆形，在设计中加以弧度的变形，顶部向外突出，比较特别的是中间的三角形缺口以及两翼下的一个锐利的边角，表现的视觉感非常的酷，而这个 LOGO的设计公司则是RO Studio ，他们也是设计Space X 公司的 LOGO。</p><p>隶属公司：特斯拉(TESLA)汽车公司</p><p>成立时间：2003</p><p>创 始 人：埃隆·马斯克</p><h3 id="雪佛兰"><a href="#雪佛兰" class="headerlink" title="雪佛兰"></a>雪佛兰</h3><p>雪佛兰商标表示了图案化了的蝴蝶结，Chevrolet是瑞士的赛车手、工程师路易斯·雪佛兰的名字。</p><p>隶属公司：美国通用汽车公司</p><p>成立时间：1911-11-3</p><p>创 始 人：威廉·杜兰特和路易斯·雪佛兰</p><h3 id="林肯"><a href="#林肯" class="headerlink" title="林肯"></a>林肯</h3><p>林肯汽车的标志采用林肯总统的名字为汽车标志。林肯商标是在一个矩形中含有一颗闪闪放光的星辰，表示林肯总统是美国联邦统一和废除奴隶制的启明星，也喻示福特·林肯牌轿车光辉灿烂。</p><p>隶属公司：美国福特汽车</p><p>成立时间：1917</p><p>创 始 人：亨利·利兰</p><h3 id="悍马"><a href="#悍马" class="headerlink" title="悍马"></a>悍马</h3><p>美国军方于七十年代末期，根据越战经验，发现需要新一代的轻型多用途军车。当时军方所要求的军用车需要符合高机动性、多用途、有轮(非履带式)，简称HMMWV(HighMobilityMulti-purposeWheeledVehicle)。而Hummer正是取自HMMWV的昵称Humveer所译音而成HUMMER。</p><p>隶属公司：通用汽车公司</p><p>成立时间：1903</p><h2 id="英国"><a href="#英国" class="headerlink" title="英国"></a>英国</h2><p><img src="/images/SoftKnowledge/CarLogo/英国车标.png" alt="英国车标.png"></p><h3 id="路虎"><a href="#路虎" class="headerlink" title="路虎"></a>路虎</h3><p>兰德-罗孚是全球著名的越野汽车，标志就是英文：LAND-ROVER。</p><p>隶属公司：印度塔塔集团</p><p>成立时间：1948</p><p>创 始 人：莫里斯·维尔克斯</p><h3 id="宾利"><a href="#宾利" class="headerlink" title="宾利"></a>宾利</h3><p>宾利(又译作本特利)(Bentley)轿车标志是以公司名的第一个字母“B”为主体，生出一对翅膀，似凌空翱翔的雄鹰，此标志一直沿用至今，过去曾用过一个展翅飞翔的“B”标志。</p><p>隶属公司：德国大众集团</p><p>成立时间：1919-8</p><p>创 始 人：沃尔特·欧文·本特利</p><h3 id="捷豹"><a href="#捷豹" class="headerlink" title="捷豹"></a>捷豹</h3><p>捷豹(JAGUAR)是英国轿车的一种名牌产品，商标为一只正在跳跃前扑的”美洲豹”雕塑，矫健勇猛，形神兼备，具有时代感与视觉冲击力，它既代表了公司的名称，又表现出向前奔驰的力量与速度，象征该车如美洲豹一样驰骋于世界各地。</p><p>隶属公司：印度塔塔汽车公司</p><p>成立时间：1922</p><p>创 始 人：威廉·里昂斯爵士</p><h3 id="劳斯莱斯"><a href="#劳斯莱斯" class="headerlink" title="劳斯莱斯"></a>劳斯莱斯</h3><p>劳斯莱斯车身上的“飞翔女神”经典车标代表的是一段真实却不为人知的悲情之恋。</p><p>隶属公司：宝马汽车公司</p><p>成立时间：1906</p><p>创 始 人：亨利·莱斯和查理·劳斯</p><h3 id="阿斯顿马丁"><a href="#阿斯顿马丁" class="headerlink" title="阿斯顿马丁"></a>阿斯顿马丁</h3><p>阿斯顿马丁汽车标志为一只展翅飞翔的大鹏，分别注有阿斯顿、马丁英文字样。喻示该公司像大鹏一样，具有从天而降的冲刺速度和远大的志向。分别注有阿斯顿、马丁英文字样表明是一家“三结义”汽车公司。</p><p>隶属公司：Prodrive</p><p>成立时间：1913</p><p>创 始 人：莱昂内尔·马丁和罗伯特·班福德</p><h3 id="迈凯伦"><a href="#迈凯伦" class="headerlink" title="迈凯伦"></a>迈凯伦</h3><p>迈凯轮车标不就是McLaren搜索，是迈凯轮的英文名称啊。Vodafone McLaren Mercedes （沃达丰-迈凯轮-梅赛德斯）是车队的全称。</p><p>隶属公司：迈凯伦集团</p><p>创 始 人：布鲁斯·迈凯伦</p><h2 id="法国"><a href="#法国" class="headerlink" title="法国"></a>法国</h2><p><img src="/images/SoftKnowledge/CarLogo/法国车标.png" alt="法国车标.png"></p><h3 id="标致"><a href="#标致" class="headerlink" title="标致"></a>标致</h3><p>雄狮形象是标致品牌的标识，1847年应用于标致的锯条产品，1880年中期演变为标致唯一的制造商标。作为品牌的象征，狮子的形象不断发生变化，演绎出跨越多个世纪的传奇。从象征锯条的质量，到代表了一个追求高质量无止境的制造企业，雄狮标识把企业与猫科动物所代表的灵活、力量和秀美等特质紧密地联系起来。</p><p>隶属公司：成标致集团</p><p>成立时间：1896</p><p>创 始 人：阿尔芒·别儒</p><h3 id="DS"><a href="#DS" class="headerlink" title="DS"></a>DS</h3><p>DS的法文全称为Déesse，在法语中是“女神”的意思。DS极受法国政要的欢迎，被誉为“总统座驾”，从戴高乐到奥朗德，DS都是法国总统的不二之选。</p><p>隶属公司：标致雪铁龙集团</p><p>成立时间：2012</p><h3 id="雪铁龙"><a href="#雪铁龙" class="headerlink" title="雪铁龙"></a>雪铁龙</h3><p>1900年，雪铁龙创始人安德鲁·雪铁龙发明了人字形齿轮，1913年安德鲁·雪铁龙建立一个齿轮厂，与11名员工生产钢制人字齿轮，并用人字形齿轮作为雪铁龙公司产品的商标。这种齿轮在运转过程中发出的噪音很小。仅6年过后，雪铁龙公司便生产出第一辆汽车，并将“双人字”作为商标。“双人字”代表了雪铁龙的原则：雪铁龙汽车在技术上应处于最高水平，然而在价格上却是能够负担得起的。</p><p>隶属公司：雪铁龙汽车公司</p><p>成立时间：1878</p><p>创 始 人：安德烈·雪铁龙</p><h3 id="雷诺"><a href="#雷诺" class="headerlink" title="雷诺"></a>雷诺</h3><p>图形商标是四个菱形拼成的图案，象征雷诺三兄弟与汽车工业融为一体，表示”雷诺”能在无限的（四维）空间中竞争、生存、发展。</p><p>隶属公司：雷诺汽车公司</p><p>成立时间：1898-10</p><p>创 始 人：路易斯·雷诺</p><h3 id="布加迪"><a href="#布加迪" class="headerlink" title="布加迪"></a>布加迪</h3><p>布加迪商标中的英文字母即布加迪，上部EB即为埃托尔布加迪英文拼音的缩写，周围一圈小圆点象征滚珠轴承，底色为红色。</p><p>隶属公司：大众集团</p><p>成立时间：1909</p><p>创 始 人：Ettore Bugatti</p><h2 id="意大利"><a href="#意大利" class="headerlink" title="意大利"></a>意大利</h2><p><img src="/images/SoftKnowledge/CarLogo/意大利车标.png" alt="意大利车标.png"></p><h3 id="法拉利"><a href="#法拉利" class="headerlink" title="法拉利"></a>法拉利</h3><p>在“跃马”的顶端，加上意大利的国徽为“天”，再以“法拉利”横写字体串连成“地”，最后以自己故乡蒙达那市的代表颜色-黄色，渲染全幅而组合成“天地之间，任我驰聘”的豪迈图腾。</p><p>隶属公司：菲亚特</p><p>成立时间：1947</p><p>创 始 人：恩佐·法拉利</p><h3 id="兰博基尼"><a href="#兰博基尼" class="headerlink" title="兰博基尼"></a>兰博基尼</h3><p>兰博基尼的标志是一头浑身充满了力气，正准备向对手发动猛烈攻击的犟牛。据说兰博基尼本人就是这种不甘示弱的牛脾气，也体现了兰博基尼公司产品的特点，因为公司生产的汽车都是大功率、高速的运动型跑车。车头和车尾上的商标省去了公司名，只剩下一头犟牛。</p><p>隶属公司：大众集团</p><p>成立时间：1963-5-7</p><p>创 始 人：费鲁吉欧·兰博基尼</p><h3 id="玛莎拉蒂"><a href="#玛莎拉蒂" class="headerlink" title="玛莎拉蒂"></a>玛莎拉蒂</h3><p>玛莎拉蒂汽车的标志是在树叶形的底座上放置的一件三叉戟，这是公司所在地意大利博洛尼亚市的市徽，相传于罗马神话中的海神纳普秋手中的武器，显示出海神巨大无比的威力。</p><p>隶属公司：菲亚特</p><p>成立时间：1914-12-1</p><p>创 始 人：阿夫尔．玛莎拉蒂</p><h2 id="瑞典"><a href="#瑞典" class="headerlink" title="瑞典"></a>瑞典</h2><p><img src="/images/SoftKnowledge/CarLogo/瑞典车标.png" alt="瑞典车标.png"></p><h3 id="沃尔沃"><a href="#沃尔沃" class="headerlink" title="沃尔沃"></a>沃尔沃</h3><p>Volvo车标由三部分图形组成：第一部分的圆圈代表古罗马战神玛尔斯，这就是铁元素的古老化学符号——里面有一支箭的圆圈，箭头呈对角线方向指向右上角。第二部分是对角线，在散热器上设置的从左上方向右下方倾斜的一条对角线彩带。第三部分是Volvo公司注册商标，是采用古埃及字体书写的VOLVO字样。</p><p>隶属公司：吉利集团</p><p>成立时间：1927</p><p>创 始 人：古斯塔夫·拉森和亚沙·盖布列森</p><h2 id="韩国"><a href="#韩国" class="headerlink" title="韩国"></a>韩国</h2><h3 id="现代"><a href="#现代" class="headerlink" title="现代"></a>现代</h3><p>商标是在椭圆中采用斜体字“H”，“H”是现代汽车公司英文名“HYUNDAI”的第一个大写字母。</p><p>隶属公司：现代集团</p><p>成立时间：1967-12-29</p><p>创 始 人：郑周永</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>车标大全 <a href="https://www.icauto.com.cn/car/chebiao/">https://www.icauto.com.cn/car/chebiao/</a></p>]]></content>
      
      
      <categories>
          
          <category> Soft Knowledge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> soft knowledge </tag>
            
            <tag> logo </tag>
            
            <tag> car </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PVE操作系统</title>
      <link href="/2023/07/13/PVE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/07/13/PVE%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="虚拟系统是什么？"><a href="#虚拟系统是什么？" class="headerlink" title="虚拟系统是什么？"></a>虚拟系统是什么？</h2><p>虚拟系统（Virtual System，VSYS）是一种虚拟化技术，指在一台物理设备上划分出多个相互独立的逻辑设备。每个虚拟系统相当于一台真实的设备，拥有自己的资源，管理员可以对虚拟系统内部的业务和资源进行单独的配置和管理。</p><p><img src="/images/computer/PVE/虚拟化.png" alt="虚拟化.png"></p><h2 id="虚拟化技术"><a href="#虚拟化技术" class="headerlink" title="虚拟化技术"></a>虚拟化技术</h2><h3 id="定义和分类"><a href="#定义和分类" class="headerlink" title="定义和分类"></a>定义和分类</h3><p>虚拟化技术是一种将物理资源（如处理器、内存、存储和网络）划分为多个虚拟环境的技术，以提供更高效的资源利用和灵活性。</p><p>计算虚拟化：</p><ul><li><p>全虚拟化（Full Virtualization）：在全虚拟化中，虚拟机完全模拟了物理计算机的硬件，包括处理器、内存、硬盘等。主要的全虚拟化技术有VMware ESXi、Microsoft Hyper-V和KVM（Kernel-based Virtual Machine）。</p></li><li><p>半虚拟化（Paravirtualization）：在半虚拟化中，虚拟机不是完全模拟物理硬件，而是通过修改操作系统内核来与虚拟化层进行通信。这种方式可以提供更高的性能，但需要对操作系统进行修改。主要的半虚拟化技术包括Xen和Oracle VM VirtualBox。</p></li><li><p>容器化（Containerization）：容器化是一种轻量级虚拟化技术，通过在操作系统层面上隔离进程和资源，实现多个相互独立的容器。容器与宿主机共享操作系统内核，因此性能较高且启动速度快。常见的容器化技术包括Docker和Kubernetes。</p></li><li><p>硬件辅助虚拟化（Hardware-assisted Virtualization）：硬件辅助虚拟化利用硬件的特殊功能来提高虚拟化性能和安全性。这种技术通常使用处理器的虚拟化扩展（如Intel VT和AMD-V）来增强虚拟化性能。大多数主流虚拟化平台都支持硬件辅助虚拟化。</p></li></ul><p><img src="/images/computer/PVE/计算虚拟化类别.png" alt="计算虚拟化类别.png"></p><p><img src="/images/computer/PVE/表格对比.png" alt="表格对比.png"></p><p>还有其他一些特定领域的虚拟化技术，例如网络虚拟化、存储虚拟化和桌面虚拟化等</p><h3 id="开源虚拟机-KVM"><a href="#开源虚拟机-KVM" class="headerlink" title="开源虚拟机 KVM 　　"></a>开源虚拟机 KVM 　　</h3><p>KVM (全称是 Kernel-based Virtual Machine) 是 Linux 下 x86 硬件平台上的全功能虚拟化解决方案，包含一个可加载的内核模块 kvm.ko 提供和虚拟化核心架构和处理器规范模块。 　　</p><p>使用 KVM 可允许多个包括 Linux 和 Windows 每个虚拟机有私有的硬件，包括网卡、磁盘以及图形适配卡等。</p><h2 id="PVE"><a href="#PVE" class="headerlink" title="PVE"></a>PVE</h2><h3 id="定义和功能"><a href="#定义和功能" class="headerlink" title="定义和功能"></a>定义和功能</h3><p>「虚拟化系统」，其中最主流的就有 ESXi、PVE、Unraid 三者。</p><p>PVE (全称 Proxmox Virtual Environment) 是一个既可运行虚拟机也能运行 Docker 容器的虚拟化环境平台。它基于 Debian 和 KVM 技术开发，完全开源免费！</p><p>可以将它想象成一个专门用于跑虚拟机的宿主系统 (虚拟机管理平台)，它同时支持两种虚拟化技术：KVM 虚拟机和 LXC 容器。</p><p>通过 PVE，你可以很方便地在一台主机上运行多种不同用途的系统，或安装各类应用容器，从而打造出一台适合你自用的“万能用途”的超级 All in One 多合一主机。比如安装：OpenWRT 旁路由 + 黑群晖 DSM + 离线下载 + NGINX + 私有网盘 + HTPC 影音播放平台 + 远程打印 + Windows + Linux 系统等等</p><h3 id="与-VMWare、Parallels-Desktop、Hyper-V-的区别："><a href="#与-VMWare、Parallels-Desktop、Hyper-V-的区别：" class="headerlink" title="与 VMWare、Parallels Desktop、Hyper-V 的区别："></a>与 VMWare、Parallels Desktop、Hyper-V 的区别：</h3><p>PVE 与大家常接触的 VMWare、Parallels Desktop、VirtualBox、Hyper-V 虚拟机不一样的地方在于，PVE 自己本身就是一款操作系统 (基于 Debian 开发而来，专门为虚拟化进行定制和优化)，而后者们则都是跑在 Windows、macOS、Linux 系统上的一款应用程序。</p><p>从系统资源的调度、虚拟机对硬件资源的利用率、稳定性以及统一管理的可用性来说，PVE 都要强于这些常见虚拟机软件。当然它们其实不是直接的竞争对手，因为主要用途和使用场景都不同，PVE 主要专注于提供整体的虚拟化解决方案，更适合生产环境和专用用途设备使用。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>具有去中心化、超融合、高可用、开源低成本、易于实施管理等诸多优点。而且兼容性特别好，基本能在所有普通 PC 上安装。</p><h3 id="安装教程"><a href="#安装教程" class="headerlink" title="安装教程"></a>安装教程</h3><ol><li>下载 PVE 系统最新版本的 ISO 镜像 (下载地址位于本文结尾处)</li><li>准备一个容量充足的 U 盘</li><li>使用 Rufus 或 Ventoy 等工具，将 ISO 制作成可启动的 U 盘</li><li>电脑设置为 USB 启动，插入 U 盘引导</li><li>选择 Install Proxmox VE，根据界面提示一步一步安装</li><li>安装途中会要求设置时区、ROOT 密码等信息</li><li>注意需要设置正确的网络信息，包含 IP、网关、DNS 等，(其中 Hostname 是域名，你有的话可以填)，这里务必要记下你设置的 IP 地址，日后都需要它来访问！</li><li>安装过程完毕后，会出现命令行提示，输入 root 和你设置的密码测试能否正常登入</li><li>在局域网内另一台电脑的浏览器上，访问 PVE 主机的 WEB 管理界面。默认端口号是 8006，假如你设的 IP 是 192.168.1.88，那么就访问 <a href="http://192.168.1.88:8006">http://192.168.1.88:8006</a></li><li>同样输入 root 和你的密码，即可进入 PVE 的网页版管理界面，大功告成！</li><li>现在你可以自由创建虚拟机，安装任意操作系统了</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>PVE 和 VMWare (ESXI) 这类虚拟化平台环境绝对是用来测试软硬件、玩机、玩系统、体验、尝鲜各种各样操作系统的最佳工具！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://zhuanlan.zhihu.com/p/55025102">Nas 系统的虚拟化方案</a> 大佬讲的是真好</p><p><a href="https://www.iplaysoft.com/pve.html">PVE 8.0 (Proxmox) 虚拟机系统 - 开源免费！安装多款不同系统 / 打造万能主机</a></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
          <category> System </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
            <tag> Operating System </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NAS折腾日记</title>
      <link href="/2023/07/13/NAS%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/"/>
      <url>/2023/07/13/NAS%E6%8A%98%E8%85%BE%E6%97%A5%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自己DIY的上限真的很高，如果自己能力强，NAS真的能被玩出花来。我也只是偶尔看到了NAS，并且被大佬的DIY折服，想着自己能不能折腾一下。</p><h2 id="开始了解NAS"><a href="#开始了解NAS" class="headerlink" title="开始了解NAS"></a>开始了解NAS</h2><p>NAS的全称叫做：Network Attached Storage，直接翻译就是“网络附属存储”。</p><p>简单来说就是连接在网络上，具备资料存储功能的装置，你可以随时存取任何资料文件。简单来说就是网盘，这可比百度网盘（限速是真的无语）好用多了。</p><p>简单来说就是一台硬盘很大，存储能力很强的电脑，所以直接使用旧电脑就行。</p><ol><li>旧电脑</li><li>路由器</li><li>硬盘 - 日立企业级机械硬盘 8T</li></ol><h2 id="功能介绍"><a href="#功能介绍" class="headerlink" title="功能介绍"></a>功能介绍</h2><p>我想要的功能包括多媒体中心、网站环境搭建、Frp、远程下载、远程连接、共享 NAS 硬盘空间。</p><h2 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h2><p>软件：宿主机PVE；虚拟机freenas；硬盘直通给freenas；</p><p>推荐超级好用的重装系统的神器 —— ventoy，理由如下：<br>无需格式化优盘，只需在U盘中安装ventoy，然后将所需的ISO镜像文件拷贝至U盘中即可</p><p><img src="/images/computer/NAS/ventoy界面.png" alt="ventoy界面.png"></p><p>在开机bios中选择重启，即可在Ventoy界面中选择自己想要的ISO镜像文件重装系统。</p><p>注：记得在bios设置中开始虚拟化技术。</p><p><img src="/images/computer/NAS/ventoy选择界面.jpg" alt="ventoy选择界面.jpg"></p><p>PVE系统设置需要注意的就是邮箱，IP,DNS,网关。</p>]]></content>
      
      
      <categories>
          
          <category> NAS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> NAS </tag>
            
            <tag> DIY </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>部署碰到的问题</title>
      <link href="/2023/07/11/%E9%83%A8%E7%BD%B2%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/07/11/%E9%83%A8%E7%BD%B2%E7%A2%B0%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>注意：别忘了开服务器防火墙的端口，不然无法访问。</p><p><br/></p><p>问题一：</p><p>直接将windows电脑上生成过的git秘钥复制黏贴到linux服务器上，使用时报以下错误</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">@         WARNING: UNPROTECTED PRIVATE KEY FILE!          @</span><br><span class="line">@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@</span><br><span class="line">Permissions 0644 for &#x27;/root/.ssh/id_rsa&#x27; are too open.</span><br><span class="line">It is required that your private key files are NOT accessible by others.</span><br><span class="line">This private key will be ignored.</span><br><span class="line">Load key &quot;/root/.ssh/id_rsa&quot;: bad permissions</span><br><span class="line">git@github.com: Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>原因：文件夹权限开放的太多</p><p>解决方案：chmod 600 ~/.ssh/id_rsa</p><p><br/></p><p>Hi XiaoCaoAskedForHelp! You’ve successfully authenticated, but GitHub does not provide shell access.</p><p>这个不是错，它只是想告诉你，github 不允许 shell 交互。仅此而已。</p><p><br/></p><p>问题二：</p><p>nginx部署出现文件访问权限问题</p><p>原因：主机上的文件权限比较低，所以无法访问，调整一下就行。</p><p>解决方案：</p><p>Dockerfile中添加一条</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">chmod</span> -R 755 /usr/share/nginx/html</span></span><br></pre></td></tr></table></figure><p><br/></p><p>问题三：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="language-bash"> ../certificate /etc/ssl/cert</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错：failed to solve: failed to compute cache key: failed to calculate checksum of ref c6d5e059-7191-4a08-977b-26a3bf0bea5a::m4cjaiah6r518jv7y4h7rqyey: &quot;/certificate&quot;: not found</span><br></pre></td></tr></table></figure><p>如果 Dockerfile 中使用了相对路径，请确保这些文件在 Dockerfile 所在的目录或子目录下。</p>]]></content>
      
      
      <categories>
          
          <category> Deploy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> software </tag>
            
            <tag> deploy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HDMI、DP、DVI、VGA哪个更好</title>
      <link href="/2023/07/11/HDMI%E3%80%81DP%E3%80%81DVI%E3%80%81VGA%E5%93%AA%E4%B8%AA%E6%9B%B4%E5%A5%BD/"/>
      <url>/2023/07/11/HDMI%E3%80%81DP%E3%80%81DVI%E3%80%81VGA%E5%93%AA%E4%B8%AA%E6%9B%B4%E5%A5%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="VGA"><a href="#VGA" class="headerlink" title="VGA"></a>VGA</h2><p>CRT 显示器（大头）时代，VGA 接口兴起，因为 CRT 显示器是模拟设备，所以 VGA 连接线也传输模拟信号。虽然后来液晶显示器不用模拟信号了，但也继承了 VGA 接口，显示器内部装有 A/D 转换器，将 VGA 的模拟信号转换为数字信号。<br>VGA 一般最高支持 1080P，再往上性能就跟不上了，画面会虚、抖动、拖影。</p><p><img src="/images/computer/HDMI、DP、DVI、VGA/vga.png" alt="vga接口.png"></p><h2 id="VGA-1"><a href="#VGA-1" class="headerlink" title="VGA"></a>VGA</h2><p>DVI还没兴起就被遗忘。它型号的型号太多，和现在主流的 HDMI 差不多，只是支持的分辨率稍微差一些。</p><p>最关键的是 DVI 和它的前辈们，都不支持音频传输。</p><p><img src="/images/computer/HDMI、DP、DVI、VGA/DVI.jpg" alt="DVI接口的各种型号.jpg"></p><h2 id="HDMI"><a href="#HDMI" class="headerlink" title="HDMI"></a>HDMI</h2><p>HDMI 俗称「高清线」，正面看起来是左右对称的梯形。是目前最常见的连接线，电视、电脑、投影都支持它。一根 HDMI 就能同时传输画面和音频。</p><p>HDMI 经过了很多次升级，简单介绍一下各版本不同：</p><p>HDMI 1.4：4K 24Hz（4,096 x 2,160），4K 30Hz（3,840 x2,160）以及1080P 120Hz；</p><p>HDMI 2.0：4K 60Hz，更高版本（HDMI 2.0a 和 2.0b）还包含对 HDR 的支持；HDMI 2.0 虽然在开启 HDR 的情况下以 4: 4: 4 色度显示只支持 4K 60Hz，但如果关掉 HDR 后以 4: 2: 0 色度显示，它的带宽也能支持 4K 120Hz。</p><p>HDMI 2.1：巨幅升级！10K 120Hz，并且还有动态 HDR，增强的音频通道允许传输杜比 Atmos 和 DTS:X 音频。</p><p><img src="/images/computer/HDMI、DP、DVI、VGA/像素变化.png" alt="像素变化.png"></p><p>另外 HDMI 还有两个衍生版本 Mini HDMI 和 Micro HDMI。</p><p><img src="/images/computer/HDMI、DP、DVI、VGA/HDMI类型.jpg" alt="HDMI类型.jpg"></p><p>这两种接口更小，主要用在小型设备，例如相机、便携播放器，性能上没有差别。</p><h3 id="HDR补充"><a href="#HDR补充" class="headerlink" title="HDR补充"></a>HDR补充</h3><h4 id="什么是真4K"><a href="#什么是真4K" class="headerlink" title="什么是真4K"></a>什么是真4K</h4><p>根据2015年中期发布的UHD（4K的另一种叫法）标准，真4K需要满足以下几个条件：</p><ol><li>分辨率达到3840X2160</li><li>采用BT2020广色域</li><li>色深【可以理解为色彩数量】达到10bit或12bit</li><li>采用HDR高动态对比显示技术</li><li>采用HDMI2.0接口传输【4K@60Hz】</li><li>……..</li></ol><p>HDR(High-Dynamic Range)简单来说就是一种提高影像亮度和对比度的处理技术，它可以将每个暗部的细节变亮，暗的地方更暗，丰富更多细节色彩，让电影，图片都能呈现出极佳的效果。</p><p><strong>dynamic range 通常是一张图中最亮点的亮度/最暗点的亮度.</strong></p><p>通常我们拍摄的照片，假设是以jpg/png的格式储存。那么他们的dynamic range最大也就是8位256这个就是我们所说的ldr(low dynamic range)。hdr通过多张张照片叠加可以做到dynamic range上万。</p><h5 id="如何叠加成为HDR？"><a href="#如何叠加成为HDR？" class="headerlink" title="如何叠加成为HDR？"></a>如何叠加成为HDR？</h5><p>首先是相机的宽容度（亮度区间）小于自然接的亮度范围（动态范围），所以通过拍摄三张照片，曝光不足，正常曝光和曝光过度的照片使用算法进行叠加，这样就得到一张明暗都不会丢失的照片，当然显示器能力不足也会压缩动态范围。</p><p><img src="/images/computer/HDMI、DP、DVI、VGA/SDR&amp;HDR.png" alt="SDR&amp;HDR.png"></p><p>传统SDR（标准对比度）最高亮度只有100nit,画面中高于100nit的部分将被失真（丢失），最低调试为0.1nit,画面中低于0.1nit的部分将被丢失。HDR技术的出现，让最高亮度达到数千nit,，最低亮度达到了0.0005nit,极大的拓展了画面中亮度高于100nit以及低于0.1nit部分的细节，同时让整幅画面看上去更加通透明快、细节丰富。</p><p>4K与蓝光相比技术标准明显更“麻烦”一些。比如就HDR技术来讲，就有<strong>HDR10、HDR10+、HLG、单层杜比视界（Dolby Vision MEL）、双层杜比视界（Dolby Vision FEL）</strong>。4K的另一个“麻烦”之处是色深标准也不统一，即色彩标准也分为10bit(10.7亿色，三原色各分2的10次方色阶，根据排列组合原理，总色彩数量为三个2的10次方相乘=10.7亿色)，和12bit(三原色各有2的12次方种色阶，总色彩数量=三个2的12次方相乘=685亿色)两种标准。</p><h2 id="DP"><a href="#DP" class="headerlink" title="DP"></a>DP</h2><p>DisplayPort（简称 DP），正面看上去它像是缺了一角的长方形，能够同时传输画面和音频。</p><p>对比一下 DP 与 HDMI 各代差异：</p><p><img src="/images/computer/HDMI、DP、DVI、VGA/DP&amp;HDMI.webp" alt="DP&amp;HDMI.webp"></p><p>排序的话应该是 DP2.0 &gt; HDMI 2.1 &gt; DP 1.4 &gt;DP 1.3 &gt; HDMI 2.0 &gt; DP 1.2 &gt; HDMI 1.4。</p><h2 id="DP-vs-HDMI-其他区别"><a href="#DP-vs-HDMI-其他区别" class="headerlink" title="DP vs HDMI 其他区别"></a>DP vs HDMI 其他区别</h2><p>FreeSync 和 G-Sync 分别是 AMD 和 Nvidia 的可变刷新率技术（VRR），用于解决画面撕裂和卡顿问题。</p><p><img src="/images/computer/HDMI、DP、DVI、VGA/VRR.png" alt="VRR.png"></p><p>HDMI 从 2.0b 开始可通过 AMD 扩展支持 FreeSync，但不支持 Nvidia 的 G-Sync。据说 HDMI2.1 将支持。<br>而 DP 线则同时支持 FreeSync 和 G-Sync</p><p>线缆越长图像音频信息丢失和延迟越严重。DP线的最大长度大约在 3m 左右，但建议 DP 线长最好不要超过 1.8m，否则显示质量会大打折扣。 而 HDMI 的长度优势就很大，最高支持 15m。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> hardware interface </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站加载速度优化II</title>
      <link href="/2023/06/06/%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96II/"/>
      <url>/2023/06/06/%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96II/</url>
      
        <content type="html"><![CDATA[<h1 id="基础理论"><a href="#基础理论" class="headerlink" title="基础理论"></a>基础理论</h1><h2 id="浏览器渲染原理"><a href="#浏览器渲染原理" class="headerlink" title="浏览器渲染原理"></a>浏览器渲染原理</h2><p>我们需要知道浏览器是如何渲染一个页面的，我们才能知道如何对页面进行性能优化</p><h3 id="进程与线程"><a href="#进程与线程" class="headerlink" title="进程与线程"></a>进程与线程</h3><p>浏览器有多种进程，其中最主要的5种进程如下：</p><p><img src="/images/software/网站加载速度优化II/浏览器多进程模型.webp" alt="628b96c2e0bec.webp"></p><ol><li>浏览器进程 负责界面展示、用户交互、子进程管理、提供存储等 </li><li>渲染进程 每个页面都有一个单独的渲染进程，用于渲染页面，包含webworker线程 </li><li>网络进程 主要处理网络资源加载（HTML、CSS、JS、IMAGE、AJAX等） </li><li>GPU进程 3D绘制，提高性能 </li><li>插件进程 chrome插件，每个插件占用一个进程</li></ol><h3 id="输入url到页面展示完整过程"><a href="#输入url到页面展示完整过程" class="headerlink" title="输入url到页面展示完整过程"></a>输入url到页面展示完整过程</h3><p><img src="/images/software/网站加载速度优化II/渲染完整过程.png" alt="渲染完整过程.png"></p><h4 id="用户输入"><a href="#用户输入" class="headerlink" title="用户输入"></a>用户输入</h4><p>用户在浏览器进程输入并按下回车健后，浏览器判断用户输入的url是否为正确的url，如果不是，则使用默认的搜索引擎将该关键字拼接成url。</p><h4 id="卸载原页面并重定向到新页面"><a href="#卸载原页面并重定向到新页面" class="headerlink" title="卸载原页面并重定向到新页面"></a>卸载原页面并重定向到新页面</h4><p>然后浏览器会将现有页面卸载掉并重定向到用户新输入的url页面，也就是图中【Process Unload Event】和【Redirect】流程。</p><p>此时浏览器会准备一个渲染进程用于渲染即将到来的页面，和一个网络进程用于发送网络请求。</p><h4 id="处理Service-Worker"><a href="#处理Service-Worker" class="headerlink" title="处理Service Worker"></a>处理Service Worker</h4><p>如果当前页面注册了Service Worker那么它可以拦截当前网站所有的请求，进行判断是否需要向远程发送网络请求。也就是图中【Service Worker Init】与【Service Worker Fecth Event 】步骤</p><p>如果不需要发送网络请求，则取本地文件。如果需要则进行下一步。</p><h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p><img src="/images/software/网站加载速度优化II/网络请求.webp" alt="网络请求.webp"><br>tip：大部分请求期间，相应的DNS查找时间和SSL时间很短，无法被捕捉到，所以只有一个已停止时间。</p><ol><li>根据url查询本地是否已经有强制缓存，如果有则判断缓存是否过期，如果没过期则直接返回缓存内容，也就是图1中【HTTP Cache】步骤 </li><li>如果没有强制缓存或者缓存已过期，则将该请求加入队列进行排队准备发送网络请求，也就是图2中【正在排队】，然后进入DNS解析阶段，也就是图1中【DNS】以及图2中的【DNS查找】，DNS根据域名解析出对应的IP地址。(DNS基于UDP)。 </li><li>使用IP寻址找到对方，然后根据IP地址+端口号创建一个TCP连接(三次握手)，也就是图1中【TCP】以及图2中的【初始连接】创建完成后利用TCP连接来传输数据。(TCP会将数据拆分为多个数据包，进行有序传输，如果丢包会重发，TCP的特点是可靠、有序)</li><li>判断当前协议是否为https，如果为https，则进行SSL协商，将数据进行加密，如果为http协议则不进行加密(明文传输)，也就是图2中的【SSL】。</li><li>开始发送http请求(请求行/请求头/请求体)，也就是图1中【Request】以及图2中的【已发送请求】。HTTP协议有多个版本，目前使用最多的版本为HTTP/1.1，HTTP/1.1发送完成后默认不会断开。keep-alive 默认打开，为了下次传输数据时复用上次创建的连接。每个域名最多同时建立6个TCP连接，所以同一时间最多发生6个请求。 </li><li>服务器收到数据后解析HTTP请求(请求行/请求头/请求体)，处理完成后生成状态码和HTTP响应(响应行/响应头/响应体)后返回给客户端，也就是图2的【等待中】在做的事情。 </li><li>客户端接收到HTTP响应后根据状态码进行对应的处理，如果状态码为304则直接代表协商缓存生效，直接取本地的缓存文件。如果不是则下载内容。也就是图1中【Response】以及图2中的【下载内容】步骤。</li></ol><h4 id="服务端响应"><a href="#服务端响应" class="headerlink" title="服务端响应"></a>服务端响应</h4><p>在网络请求第6步中，服务器收到HTTP请求后需要根据请求信息来进行解析，并返回给客户端想要的数据，这也就服务端响应。</p><p>服务端可以响应并返回给客户端很多种类型的资源，这里主要介绍html类型。</p><p>目前前端处理服务端响应html请求主要分为SSR服务端渲染与CSR客户端渲染，CSR就是返回一个空的HTML模版，然后浏览器加载js后通过js动态渲染页面。SSR是服务端在接受到请求时事先在服务端渲染好html返回给客户端后，客户端再进行客户端激活。</p><p>在打开一个站点的首屏页的完整链路中，使用SSR服务端渲染时的速度要远大于CSR客户端渲染，并且SSR对SEO友好。所以对于首屏加载速度比较敏感或者需要优化SEO的站点来说，使用SSR是更好的选择。</p><h4 id="浏览器渲染详细流程"><a href="#浏览器渲染详细流程" class="headerlink" title="浏览器渲染详细流程"></a>浏览器渲染详细流程</h4><p>浏览器渲染详细流程主要在网络请求中的第7步。浏览器下载完html内容后进行解析何渲染页面的流程。</p><p><img src="/images/software/网站加载速度优化II/浏览器渲染流程.webp" alt="浏览器渲染流程.webp"></p><p>渲染流程分为4种情况：</p><ol><li>HTML中无任何CSS相关标签</li><li>CSS相关标签在HTML最顶部，且在解析到内容标签（<div />）时已经解析完CSS相关标签 </li><li>CSS相关标签在HTML最顶部，但在解析到内容标签（<div />）时CSS相关标签尚未解析完 </li><li>CSS相关标签在HTML最底部</li></ol><h3 id="浏览器处理每一帧的流程"><a href="#浏览器处理每一帧的流程" class="headerlink" title="浏览器处理每一帧的流程"></a>浏览器处理每一帧的流程</h3><p>浏览器在渲染完页面之后还需要不间断的处理很多内容的，比如动画、用户事件、定时器等。因此当浏览器渲染完页面后，还会在之后的每一帧到来时执行以下的流程。</p><p><img src="/images/software/网站加载速度优化II/每一帧流程.webp" alt="每一帧流程.webp"></p><ol><li>【Input events】处理用户事件，先处理【阻塞事件Blocking】包括touch和wheel事件，后处理【非阻塞事件Non-blocking】包括click和keypress。 </li><li>【JS】处理完用户事件后执行【定时器Timers】 </li><li>【Begin frame】处理完定时器后开始进行【每帧事件Per frame events】的处理，包括窗口大小改变、滚动、媒体查询的更改、动画事件。 </li><li>【rAF】处理完帧事件后执行requestAnimationFrame回调函数和IntersectionObserver回调函数。 </li><li>【Layout】然后【重新计算样式Recalc style】、【更新布局Update layout】、【调整Observer回调的大小Resize Observer callbacks】 </li><li>【Paint】然后【合成更新Compositing update】、【Paint invalidation】、【Record】</li></ol><h2 id="Chrome性能优化相关工具"><a href="#Chrome性能优化相关工具" class="headerlink" title="Chrome性能优化相关工具"></a>Chrome性能优化相关工具</h2><p>了解完浏览器渲染原理，我们还需要知道根据哪些指标才能判断一个页面性能的好坏，在Chrome中这些指标应该怎么获取。以及Chrome都为我们提供了哪些性能相关的工具，如何使用。</p><h3 id="Chrome-Performance-性能"><a href="#Chrome-Performance-性能" class="headerlink" title="Chrome Performance(性能)"></a>Chrome Performance(性能)</h3><p>Performance既是一个Chrome工具，可用于性能检测。<br>同样又是一套JS API，可在Chrome中执行。</p><h4 id="Chrome-Performance-工具的使用"><a href="#Chrome-Performance-工具的使用" class="headerlink" title="Chrome Performance 工具的使用"></a>Chrome Performance 工具的使用</h4><p>打开Chrome调试面板选择Performance，中文版为性能，点击刷新按钮，Performance会刷新并录制当前页面，然后我们就可以在面板中看到如下的各种性能相关细节。</p><p><img src="/images/software/网站加载速度优化II/Chrome性能优化相关工具.webp" alt="Chrome性能优化相关工具.webp"></p><h4 id="使用Performance-API获取性能相关指标"><a href="#使用Performance-API获取性能相关指标" class="headerlink" title="使用Performance API获取性能相关指标"></a>使用Performance API获取性能相关指标</h4><p>接下来我们来了解一下目前常用的性能指标，并且我们需要知道其中一些关键指标如何用Performance API获取。</p><ol><li>TTFB（Time To First Byte）首字节时间：从发送请求到数据返回第一个字节所消耗的时间。 </li><li>FP (First Paint) 首次绘制: 第一个像素绘制到页面上的时间。 </li><li>FCP (First Contentful Paint) 首次内容绘制: 标记浏览器渲染来自 DOM 第一位内容的时间点，该内容可能是文本、图像、SVG 甚至 元素。 </li><li>FMP(First Meaningful Paint) 首次有效绘制: 例如，在 YouTube 观看页面上，主视频就是主角元素。<br>图片可以没加载完成，但整体的骨架已经加载完成了。<br>1秒内完成FMP的概率超过80%，那就代表这个网站是一个性能较好的网站。 </li><li>TTI (Time to Interactive) 可交互时间 : DOM树构建完毕，可以绑定事件的时间 </li><li>LCP (Largest Contentful Paint) 最大内容渲染: 代表在viewport中最大的页面元素加载的时间。LCP的数据会通过PerformanceEntry对象记录, 每次出现更大的内容渲染, 则会产生一个新的PerformanceEntry对象(2019年11月新增)。 </li><li>DCL (DomContentloaded): 当 HTML 文档被完全加载和解析完成之后，DOMContentLoaded 事件被触发，无需等待样式表、图像和子框架的完成加载。 </li><li>L (onLoad), 当依赖的资源(图片、文件等), 全部加载完毕之后才会触发。 </li><li>TBT (Total Blocking Time) 页面阻塞总时长: TBT汇总所有加载过程中阻塞用户操作的时长，在FCP和TTI之间任何long task中阻塞部分都会被汇总。 </li><li>CLS (Cumulative Layout Shift) 累积布局偏移: 总结起来就是一个元素初始时和其hidden之间的任何时间如果元素偏移了, 则会被计算进去, 具体的计算方法可看这篇文章 <a href="https://web.dev/cls/">https://web.dev/cls/</a></li><li>SI (Speed Index): 指标用于显示页面可见部分的显示速度, 单位是时间。</li></ol><h3 id="Coverage-覆盖率"><a href="#Coverage-覆盖率" class="headerlink" title="Coverage(覆盖率)"></a>Coverage(覆盖率)</h3><p>获取代码未使用占比。获取代码未使用占比<br><img src="/images/software/网站加载速度优化II/覆盖范围.png" alt="覆盖范围.png"></p><h3 id="Lighthouse"><a href="#Lighthouse" class="headerlink" title="Lighthouse"></a>Lighthouse</h3><p>获取性能报告并查看推荐优化项。可以在本地安装命令行工具来使用，也可以通过Chrome来使用。<br><img src="/images/software/网站加载速度优化II/LightHouse.png" alt="LightHouse.png"></p><h3 id="Network-网络"><a href="#Network-网络" class="headerlink" title="Network(网络)"></a>Network(网络)</h3><h4 id="网络请求中的Timing-时间"><a href="#网络请求中的Timing-时间" class="headerlink" title="网络请求中的Timing(时间)"></a>网络请求中的Timing(时间)</h4><p>能获取网络请求的时间消耗细节，可以根据耗时来决定优化策略。优先优化耗时最长的。<br><img src="/images/software/网站加载速度优化II/Timing.webp" alt="Timing.webp"></p><ul><li>正在排队：网络请求队列的排队时间 </li><li>已停止：阻塞住用于处理其他事情的时间 </li><li>DNS查找：用于DNS解析IP地址的时间 </li><li>初始连接：创建TCP连接时间 </li><li>SSL：用于SSL协商的时间 </li><li>已发送请求：用于发送请求的时间 </li><li>等待中：请求发出至接收响应的时间也可以理解为服务端处理请求的时间 </li><li>下载内容：下载响应的时间</li></ul><h4 id="网络请求的优先级"><a href="#网络请求的优先级" class="headerlink" title="网络请求的优先级"></a>网络请求的优先级</h4><p>浏览器会根据资源的类型决定优先请求哪些资源，优先级高的请求能够优先被加载。<br><img src="/images/software/网站加载速度优化II/优先级.webp" alt="优先级.webp"></p><p>不同资源类型的优先级排序如下：</p><ul><li>最高：html、style</li><li>高：font、fetch、script</li><li>低：image、track</li></ul><h4 id="网页总资源信息"><a href="#网页总资源信息" class="headerlink" title="网页总资源信息"></a>网页总资源信息</h4><p><img src="/images/software/网站加载速度优化II/网页总资源信息.webp" alt="网页总资源信息.webp"></p><ul><li>58个请求：网页一共多少个请求 </li><li>6.9 MB 项资源：网页资源一共6.9MB大小 </li><li>DOMContentLoaded 454 毫秒：DOM加载完毕的时长 </li><li>加载时间 1.02 秒：onload完毕的时长</li></ul>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Optimization </tag>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Queryable和Enumerable</title>
      <link href="/2023/06/06/Queryable%E5%92%8CEnumerable/"/>
      <url>/2023/06/06/Queryable%E5%92%8CEnumerable/</url>
      
        <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><p>Queryable 和 Enumerable 都是 Linq 中的基础接口，但它们有一些明显的不同：</p><ol><li><p>数据源：Enumerable 主要用于针对内存中的集合（List，Array 等）进行查询，而 Queryable 适用于各种数据源（比如数据库、Web API 等）。</p></li><li><p>执行时机：Enumerable 的所有查询操作（如 Where、Select、OrderBy 等）都是在内存中完成的，也就是说当调用查询方法时，整个数据集会被加载到内存中进行操作。而 Queryable 的查询操作则是转换为对应的 SQL 语句，在数据库中执行，只有当你要求最终结果（如调用 ToList、Count、First 等）时，才会真正执行查询并从数据库中获取数据。</p></li><li><p>执行效率：由于 Queryable 是将查询操作转换为 SQL 语句，在数据库中执行，因此在处理大量数据时，它通常比 Enumerable 更快。而 Enumerable 则是直接对内存中的数据集进行操作，对于小型数据集而言，在效率上可能更快。</p></li><li><p>扩展性：IEnumerable 接口仅提供了有关集合的操作, IQueryable 接口提供了更灵活的查询操作, 但只有当你查询的数据源实现了 IQueryable 接口时才能使用这些高级查询操作。</p></li></ol><p>综上所述，Enumerable 更适合处理在内存中进行操作的数据集，而 Queryable 更适用于需要处理大量数据的情况，尤其是在与数据库交互的场景下。</p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C#表达式树</title>
      <link href="/2023/06/06/C-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91/"/>
      <url>/2023/06/06/C-%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="λ表达式树、lambda、委托它们之间的区别和联系"><a href="#λ表达式树、lambda、委托它们之间的区别和联系" class="headerlink" title="λ表达式树、lambda、委托它们之间的区别和联系"></a>λ表达式树、lambda、委托它们之间的区别和联系</h2><ol><li><p>委托是一种类型，是方法的抽象，通过委托可以<strong>将方法以参数的形式传递给另一个方法</strong><br>，同时调用委托的时候，它所包含的方法都会被实现。委托的关键字是delegate，可以自定义委托，也可以使用内置委托Func、Action，通过简化，可以将Lambda表达式或Lambda语句赋值给委托，委托的调用包括同步调用和异步调用。</p></li><li><p>表达式树(Expression)<br>是一种数据结构，表达式树也称表达式目录树，是将代码以一种抽象的方式表示成一个对象树，树中每个节点本身都是一个表达式。表达式树不是可执行代码，它是一种数据结构。可以利用Lambda表达式进行声明，Lambda表达式的规则要符合Expression中Func委托的参数规则，但Lambda语句是不能声明的。</p></li><li><p>lambda是当委托只有一句话代码的时候的最简写形式。</p></li><li><p>Lambda表达式不仅可以用来创建委托实例，C#编译器也能够将他们转换成表达式树。</p></li></ol><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Func委托,必须要有返回值，最后一个参数为返回值,前面为输入参数</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; func1 = <span class="keyword">new</span> Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt;((<span class="built_in">int</span> m, <span class="built_in">int</span> n) =&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> m * n + <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对其进行最简化(Lambda表达式)</span></span><br><span class="line">Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt; func2 = (m, n) =&gt; m * n + <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用委托</span></span><br><span class="line"><span class="built_in">int</span> result1 = func1(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">int</span> result2 = func2.Invoke(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">Console.WriteLine(<span class="string">&quot;结果分别为：&#123;0&#125;,&#123;1&#125;&quot;</span>, result1, result2);</span><br></pre></td></tr></table></figure><p>常用的linq和EFCore也是使用的委托和表达式树<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> List&lt;<span class="built_in">int</span>&gt;().AsQueryable().Where(s =&gt; s == <span class="number">1</span>);<span class="comment">//使用表达式树</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IQueryable</span>&lt;<span class="title">TSource</span>&gt; <span class="title">Where</span>&lt;<span class="title">TSource</span>&gt;(<span class="params"><span class="keyword">this</span> IQueryable&lt;TSource&gt; source, Expression&lt;Func&lt;TSource, <span class="built_in">bool</span>&gt;&gt; predicate</span>)</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">new</span> <span class="title">List</span>&lt;<span class="title">int</span>&gt;().<span class="title">Where</span>(<span class="params">s =&gt; s == <span class="number">1</span></span>)</span>;<span class="comment">//使用委托</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">IEnumerable</span>&lt;<span class="title">TSource</span>&gt; <span class="title">Where</span>&lt;<span class="title">TSource</span>&gt;(<span class="params"><span class="keyword">this</span> IEnumerable&lt;TSource&gt; source, Func&lt;TSource, <span class="built_in">bool</span>&gt; predicate</span>)</span></span><br></pre></td></tr></table></figure></p><h2 id="λ表达式树入门"><a href="#λ表达式树入门" class="headerlink" title="λ表达式树入门"></a>λ表达式树入门</h2><h3 id="常见Expression-API"><a href="#常见Expression-API" class="headerlink" title="常见Expression API"></a>常见Expression API</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Expression.Add, Expression.Subtract, Expression.Multiply, Expression.Divide：二元数学操作符。</span><br><span class="line"></span><br><span class="line">Expression.And, Expression.Or, Expression.Not：逻辑操作符。</span><br><span class="line"></span><br><span class="line">Expression.Equal, Expression.NotEqual, Expression.GreaterThan, Expression.GreaterThanOrEqual, Expression.LessThan, Expression.LessThanOrEqual：比较操作符。</span><br><span class="line"></span><br><span class="line">Expression.Call, Expression.Invoke：方法调用操作符。</span><br><span class="line"></span><br><span class="line">Expression.MemberAccess, Expression.ArrayIndex：成员访问操作符。</span><br><span class="line"></span><br><span class="line">Expression.Assign：赋值操作符。</span><br><span class="line"></span><br><span class="line">Expression.Constant：常量表达式。</span><br><span class="line"></span><br><span class="line">Expression.Parameter：表示方法或 Lambda 表达式的参数。</span><br><span class="line"></span><br><span class="line">Expression.Lambda：用于创建 Lambda 表达式。</span><br><span class="line"></span><br><span class="line">Expression.New, Expression.NewArrayInit,，Expression.NewArrayBounds：创建新对象或数组。</span><br><span class="line"></span><br><span class="line">Expression.Convert, Expression.ConvertChecked：类型转换操作符。</span><br><span class="line"></span><br><span class="line">Expression.Block：创建代码块。</span><br><span class="line"></span><br><span class="line">Expression.TryCatch, Expression.TryFinally, Expression.Catch：异常处理操作符。</span><br></pre></td></tr></table></figure><h3 id="例"><a href="#例" class="headerlink" title="例"></a>例</h3><p>(a,b)=&gt;a<em>3+b</em>4</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="string">&quot;a&quot;</span>);<span class="comment">//声明一个int类型的参数a</span></span><br><span class="line"><span class="keyword">var</span> num1 = Expression.Constant(<span class="number">3</span>);<span class="comment">//声明一个常量3</span></span><br><span class="line"><span class="keyword">var</span> r1 = Expression.Multiply(a, num1);<span class="comment">//乘法表达式，a*3</span></span><br><span class="line"><span class="keyword">var</span> b = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="string">&quot;b&quot;</span>);<span class="comment">//声明一个int类型的参数b</span></span><br><span class="line"><span class="keyword">var</span> num2 = Expression.Constant(<span class="number">4</span>);<span class="comment">//声明一个常量4</span></span><br><span class="line"><span class="keyword">var</span> r2 = Expression.Multiply(b, num2);<span class="comment">//乘法表达式，b*4</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">add</span> = Expression.Add(r1, r2);<span class="comment">//a*3+b*4</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt;(<span class="keyword">add</span>, a, b);<span class="comment">// 将表达式树组装成lambda表达式树，两个输入，一个输出，故Func&lt;int, int, int&gt;</span></span><br><span class="line"><span class="keyword">var</span> func = lambda.Compile(); <span class="comment">//将lambda表达式树编译成Func委托</span></span><br><span class="line">Console.WriteLine(lambda);</span><br><span class="line">Console.WriteLine(func(<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">Expression&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">int</span>, <span class="built_in">int</span>&gt;&gt; func = (a, b) =&gt; a * <span class="number">3</span> + b * <span class="number">4</span>; <span class="comment">//直接这样写也行</span></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">(a, b) =&gt; ((a * 3) + (b * 4))</span><br><span class="line">18</span><br></pre></td></tr></table></figure><h2 id="替代反射"><a href="#替代反射" class="headerlink" title="替代反射"></a>替代反射</h2><p>测试类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyClass</span>(<span class="params"><span class="built_in">int</span> num</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Number = num;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> MyBool &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Number &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> MyProperty &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="built_in">string</span>&gt; List &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">SayHello</span>(<span class="params"><span class="built_in">string</span> s</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> s + DateTime.Now.ToString(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newExpression = Expression.New(<span class="keyword">typeof</span>(MyClass).GetConstructor(<span class="keyword">new</span>[] &#123; <span class="keyword">typeof</span>(<span class="built_in">int</span>) &#125;), Expression.Constant(<span class="number">100</span>)); <span class="comment">// 有参构造函数方式</span></span><br><span class="line"><span class="comment">//var newExpression = Expression.New(typeof(MyClass)); //无参构造函数方式</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;MyClass&gt;&gt;(newExpression);</span><br><span class="line"><span class="keyword">var</span> myClass = lambda.Compile()();</span><br></pre></td></tr></table></figure><h3 id="获取属性值"><a href="#获取属性值" class="headerlink" title="获取属性值"></a>获取属性值</h3><p>e=&gt;e.MyProperty 使用 Expression.Property</p><p>e=&gt;e.MyProperty表达式分析得到两部分：参数和属性，也是一种基本表达式</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var e = Expression.Parameter(typeof(MyClass), &quot;e&quot;);</span><br><span class="line">var property = Expression.Property(e, nameof(MyClass.MyProperty));</span><br><span class="line">var lambda = Expression.Lambda&lt;Func&lt;MyClass, string&gt;&gt;(property, e);</span><br><span class="line">var func = lambda.Compile();</span><br><span class="line">Console.WriteLine(lambda);</span><br><span class="line">Console.WriteLine(func(new MyClass(10) &#123; MyProperty = &quot;fdsafdsa&quot; &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">e =&gt; e.MyProperty</span><br><span class="line">fdsafdsa</span><br></pre></td></tr></table></figure><h3 id="为属性赋值"><a href="#为属性赋值" class="headerlink" title="为属性赋值"></a>为属性赋值</h3><p>例： e=&gt;e.MyProperty=new List<string>(){“sdf”}<br>e=&gt;e.List=new List<string>(){“sdf”}</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> newExpression = Expression.New(<span class="keyword">typeof</span>(MyClass).GetConstructor(<span class="keyword">new</span>[] &#123; <span class="keyword">typeof</span>(<span class="built_in">int</span>) &#125;), Expression.Constant(<span class="number">100</span>));<span class="comment">// 有参构造函数方式</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;MyClass&gt;&gt;(newExpression);</span><br><span class="line"><span class="keyword">var</span> myClass = lambda.Compile()();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> e = Expression.Parameter(<span class="keyword">typeof</span>(MyClass), <span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> property = Expression.Property(e, <span class="keyword">nameof</span>(MyClass.MyProperty));</span><br><span class="line"><span class="keyword">var</span> assigString = Expression.Assign(property, Expression.Constant(<span class="string">&quot;fdsfds&quot;</span>)); <span class="comment">//为字符串类型的属性赋值</span></span><br><span class="line"><span class="keyword">var</span> assignList = Expression.Assign(Expression.Property(e, <span class="keyword">nameof</span>(MyClass.List)),</span><br><span class="line">    Expression.Constant(<span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;() &#123; <span class="string">&quot;fdsa&quot;</span> &#125;)); <span class="comment">//为集合类型的属性赋值</span></span><br><span class="line"></span><br><span class="line">Expression.Lambda&lt;Action&lt;MyClass&gt;&gt;(assignList, e).Compile()(myClass);<span class="comment">// 因为赋值操作没有返回值，所以是Action，并且只有一个入参</span></span><br><span class="line">Expression.Lambda&lt;Action&lt;MyClass&gt;&gt;(assigString, e).Compile()(myClass);</span><br><span class="line"></span><br><span class="line">Console.WriteLine(myClass.List.Count);</span><br><span class="line">Console.WriteLine(Expression.Lambda&lt;Action&lt;MyClass&gt;&gt;(assignList, e));</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">1</span><br><span class="line">e =&gt; (e.List = value(System.Collections.Generic.List`1[System.String]))</span><br></pre></td></tr></table></figure><h3 id="调用无参方法"><a href="#调用无参方法" class="headerlink" title="调用无参方法"></a>调用无参方法</h3><p>调用方法通过Expression.Call进行对象的方法调用，调用前需要先获取被调用的方法对象</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = Expression.Parameter(<span class="keyword">typeof</span>(MyClass), <span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> method = <span class="keyword">typeof</span>(MyClass).GetMethod(<span class="keyword">nameof</span>(GetHashCode));<span class="comment">//获取MyClass的GetHashCode方法</span></span><br><span class="line"><span class="keyword">var</span> call = Expression.Call(e, method);<span class="comment">//e.GetHashCode()</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;MyClass, <span class="built_in">int</span>&gt;&gt;(call, e);</span><br><span class="line">Console.WriteLine(lambda);</span><br><span class="line">Console.WriteLine(lambda.Compile()(<span class="keyword">new</span> MyClass(<span class="number">10</span>)));</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">e =&gt; e.GetHashCode()</span><br><span class="line">43942917</span><br></pre></td></tr></table></figure><h3 id="调用有参方法"><a href="#调用有参方法" class="headerlink" title="调用有参方法"></a>调用有参方法</h3><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = Expression.Parameter(<span class="keyword">typeof</span>(MyClass), <span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> method = <span class="keyword">typeof</span>(MyClass).GetMethod(<span class="keyword">nameof</span>(MyClass.SayHello), <span class="keyword">new</span>[] &#123; <span class="keyword">typeof</span>(<span class="built_in">string</span>) &#125;);</span><br><span class="line"><span class="keyword">var</span> call = Expression.Call(e, method, Expression.Constant(<span class="string">&quot;你好&quot;</span>));<span class="comment">//调用SayHello方法并给方法传入&quot;你好&quot;参数</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;MyClass, <span class="built_in">string</span>&gt;&gt;(call, e);</span><br></pre></td></tr></table></figure><h3 id="调用linq拓展方法"><a href="#调用linq拓展方法" class="headerlink" title="调用linq拓展方法"></a>调用linq拓展方法</h3><p><img src="/images/software/表达式树/拆分图.png" alt="linq拓展方法表达式树拆分图.jpg"></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = Expression.Parameter(<span class="keyword">typeof</span>(MyClass), <span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> list = Expression.Property(e, <span class="keyword">nameof</span>(MyClass.List)); <span class="comment">//e.List</span></span><br><span class="line"><span class="keyword">var</span> containsMethod = <span class="keyword">typeof</span>(Enumerable).GetMethods()</span><br><span class="line">    .FirstOrDefault(info =&gt; info.GetParameters().Length == <span class="number">2</span> &amp;&amp; info.Name == <span class="string">&quot;Contains&quot;</span>)</span><br><span class="line">    .MakeGenericMethod(<span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line"><span class="keyword">var</span> contains = Expression.Call(containsMethod, list, Expression.Constant(<span class="string">&quot;s&quot;</span>));<span class="comment">//e.List.Contains(&quot;s&quot;)</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;MyClass, <span class="built_in">bool</span>&gt;&gt;(contains, e);</span><br><span class="line">Console.WriteLine(lambda);</span><br><span class="line">Console.WriteLine(lambda.Compile()(<span class="keyword">new</span> MyClass(<span class="number">1</span>) &#123; List = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;(<span class="string">&#x27;s&#x27;</span>) &#125;));</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">结果：</span><br><span class="line">e =&gt; e.List.Contains(&quot;s&quot;)</span><br><span class="line">False</span><br></pre></td></tr></table></figure><h3 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h3><p>Expression.Condition，即可生成三目表达式的λ表达式树<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="string">&quot;x&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> gt60 = Expression.GreaterThan(x, Expression.Constant(<span class="number">60</span>));<span class="comment">//x&gt;60</span></span><br><span class="line"><span class="keyword">var</span> condition = Expression.Condition(gt60, Expression.Constant(<span class="string">&quot;及格&quot;</span>), Expression.Constant(<span class="string">&quot;不及格&quot;</span>));<span class="comment">//x&gt;60?&quot;及格&quot;:&quot;不及格&quot;</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;<span class="built_in">int</span>, <span class="built_in">string</span>&gt;&gt;(condition, x);<span class="comment">//x=&gt;x&gt;60?&quot;及格&quot;:&quot;不及格&quot;</span></span><br></pre></td></tr></table></figure></p><h3 id="null值表达式"><a href="#null值表达式" class="headerlink" title="null值表达式"></a>null值表达式</h3><p>e=&gt;e.MyProperty??”s”</p><p>Expression.Coalesce便是对标的C#6专属的null值表达式</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> e = Expression.Parameter(<span class="keyword">typeof</span>(MyClass), <span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> expression = Expression.Property(e, <span class="string">&quot;MyProperty&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> coalesce = Expression.Coalesce(expression, Expression.Constant(<span class="string">&quot;s&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;MyClass, <span class="built_in">string</span>&gt;&gt;(coalesce, e);</span><br></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><p>Convert.ToInt32(x)</p><p>Expression.Convert即等价于Convert静态类</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> convert = Expression.Convert(Expression.Constant(<span class="number">10.234</span>), <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;<span class="built_in">int</span>&gt;&gt;(convert);</span><br></pre></td></tr></table></figure><h3 id="声明一个数组对象"><a href="#声明一个数组对象" class="headerlink" title="声明一个数组对象"></a>声明一个数组对象</h3><p>Expression.NewArrayBounds即可生成一个创建数组对象的表达式：</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = Expression.NewArrayBounds(<span class="keyword">typeof</span>(<span class="built_in">string</span>), Expression.Constant(<span class="number">5</span>));</span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;<span class="built_in">string</span>[]&gt;&gt;(array);</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>m=&gt;m.MyProperty.Contains(“ldqk”)||m.List.Any(s=&gt;s.Length&gt;1&amp;&amp;s.Contains(“a”))<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 前一部分</span></span><br><span class="line"><span class="keyword">var</span> m = Expression.Parameter(<span class="keyword">typeof</span>(MyClass), <span class="string">&quot;m&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> myProperty = Expression.Property(m, <span class="keyword">nameof</span>(MyClass.MyProperty)); <span class="comment">// m.MyProperty</span></span><br><span class="line"><span class="keyword">var</span> contains = Expression.Call(myProperty, <span class="keyword">typeof</span>(<span class="built_in">string</span>).GetMethod(<span class="string">&quot;Contains&quot;</span>, <span class="keyword">new</span>[] &#123; <span class="keyword">typeof</span>(<span class="built_in">string</span>) &#125;),</span><br><span class="line">    Expression.Constant(<span class="string">&quot;ldqk&quot;</span>)); <span class="comment">// m.MyProperty.Contains(&quot;ldqk&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后一部分</span></span><br><span class="line"><span class="keyword">var</span> s = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">string</span>), <span class="string">&quot;s&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> length = Expression.Property(s, <span class="keyword">nameof</span>(<span class="built_in">string</span>.Length)); <span class="comment">//s.Length</span></span><br><span class="line"><span class="keyword">var</span> gt10 = Expression.GreaterThan(length, Expression.Constant(<span class="number">1</span>)); <span class="comment">//s=&gt;s.Length&gt;1</span></span><br><span class="line"><span class="keyword">var</span> anyConstains = Expression.Call(s,<span class="keyword">typeof</span>(<span class="built_in">string</span>).GetMethod(<span class="string">&quot;Contains&quot;</span>, <span class="keyword">new</span>[] &#123; <span class="keyword">typeof</span>(<span class="built_in">string</span>) &#125;), Expression.Constant(<span class="string">&quot;a&quot;</span>));<span class="comment">// s.Contains(&quot;a&quot;)</span></span><br><span class="line"><span class="keyword">var</span> anyWhere = Expression.And(gt10, anyConstains); <span class="comment">//s.Length&gt;1&amp;&amp;s.Contains(&quot;a&quot;)</span></span><br><span class="line"><span class="keyword">var</span> anyLambda = Expression.Lambda(anyWhere, s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> any = <span class="keyword">typeof</span>(Enumerable).GetMethods().FirstOrDefault(info =&gt; info.GetParameters().Length == <span class="number">2</span> &amp;&amp; info.Name == <span class="string">&quot;Any&quot;</span>).MakeGenericMethod(<span class="keyword">typeof</span>(<span class="built_in">string</span>));</span><br><span class="line"><span class="keyword">var</span> list = Expression.Property(m, <span class="keyword">nameof</span>(MyClass.List)); <span class="comment">// m.List</span></span><br><span class="line"><span class="keyword">var</span> whereLambda = Expression.Call(<span class="literal">null</span>, any, list, anyLambda);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;MyClass, <span class="built_in">bool</span>&gt;&gt;(Expression.OrElse(contains, whereLambda),m); <span class="comment">//m=&gt;m.MyProperty.Contains(&quot;ldqk&quot;)||m.List.Any(s=&gt;s.Length&gt;1&amp;&amp;s.Contains(&quot;a&quot;))</span></span><br><span class="line">Console.WriteLine(lambda);</span><br></pre></td></tr></table></figure></p><p>链式调用s=&gt;s.List.Select(e =&gt; e.Length).OrderBy(x=&gt;x).FirstOrDefault() &gt; 1<br><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> s = Expression.Parameter(<span class="keyword">typeof</span>(MyClass), <span class="string">&quot;s&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> list = Expression.Property(s, <span class="keyword">nameof</span>(MyClass.List)); <span class="comment">//s.List</span></span><br><span class="line"><span class="keyword">var</span> selectMethod = <span class="keyword">typeof</span>(Enumerable).GetMethods()</span><br><span class="line">    .FirstOrDefault(info =&gt; info.GetParameters().Length == <span class="number">2</span> &amp;&amp; info.Name == <span class="string">&quot;Select&quot;</span>)</span><br><span class="line">    .MakeGenericMethod(<span class="keyword">typeof</span>(<span class="built_in">string</span>), <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line"><span class="keyword">var</span> e = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">string</span>), <span class="string">&quot;e&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> elen = Expression.Property(e, <span class="keyword">nameof</span>(<span class="built_in">string</span>.Length)); <span class="comment">// e.Length</span></span><br><span class="line"><span class="keyword">var</span> selectLambda = Expression.Lambda&lt;Func&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt;&gt;(elen, e); <span class="comment">// e=&gt;e.Length</span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">select</span> = Expression.Call(selectMethod, list, selectLambda);<span class="comment">//s.List.Select(e =&gt; e.Length)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">orderby</span> = <span class="keyword">typeof</span>(Enumerable).GetMethods().FirstOrDefault(info =&gt; info.GetParameters().Length == <span class="number">2</span> &amp;&amp; info.Name == <span class="string">&quot;OrderBy&quot;</span>).MakeGenericMethod(<span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line"><span class="keyword">var</span> parameter = Expression.Parameter(<span class="keyword">typeof</span>(<span class="built_in">int</span>), <span class="string">&quot;x&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> orderbyLambda = Expression.Lambda(parameter, parameter); <span class="comment">//x=&gt;x</span></span><br><span class="line"><span class="keyword">var</span> orderByCall = Expression.Call(<span class="keyword">orderby</span>, <span class="keyword">select</span>, orderbyLambda); <span class="comment">//s.List.Select(e =&gt; e.Length).OrderBy(x=&gt;x)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> first = <span class="keyword">typeof</span>(Enumerable).GetMethods().FirstOrDefault(info =&gt; info.GetParameters().Length == <span class="number">1</span> &amp;&amp; info.Name == <span class="string">&quot;FirstOrDefault&quot;</span>).MakeGenericMethod(<span class="keyword">typeof</span>(<span class="built_in">int</span>));</span><br><span class="line"><span class="keyword">var</span> firstExp = Expression.Call(<span class="literal">null</span>, first, orderByCall); <span class="comment">//s.List.Select(e =&gt; e.Length).OrderBy(x=&gt;x).FirstOrDefault()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> greaterThan = Expression.GreaterThan(firstExp, Expression.Constant(<span class="number">1</span>)); <span class="comment">//s.List.Select(e =&gt; e.Length).OrderBy(x=&gt;x).FirstOrDefault() &gt; 1</span></span><br><span class="line"><span class="keyword">var</span> lambda = Expression.Lambda&lt;Func&lt;MyClass, <span class="built_in">bool</span>&gt;&gt;(greaterThan, s);</span><br><span class="line">Console.WriteLine(lambda);</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站标题魔改</title>
      <link href="/2023/05/26/%E7%BD%91%E7%AB%99%E6%A0%87%E9%A2%98%E9%AD%94%E6%94%B9/"/>
      <url>/2023/05/26/%E7%BD%91%E7%AB%99%E6%A0%87%E9%A2%98%E9%AD%94%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li><p>新建文件[BlogRoot]\source\js\custom.js，写入以下内容：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//动态标题</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">OriginTitile</span> = <span class="variable language_">document</span>.<span class="property">title</span>;</span><br><span class="line"><span class="keyword">var</span> titleTime;</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;visibilitychange&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="variable language_">document</span>.<span class="property">hidden</span>) &#123;</span><br><span class="line">    <span class="comment">//离开当前页面时标签显示内容</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;🚀不要走嘛，在看看吧~&#x27;</span>;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(titleTime);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">//返回当前页面时标签显示内容</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">title</span> = <span class="string">&#x27;⚓欢迎回来～&#x27;</span>;</span><br><span class="line">    <span class="comment">//两秒后变回正常标题</span></span><br><span class="line">    titleTime = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">document</span>.<span class="property">title</span> = <span class="title class_">OriginTitile</span>;</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>在主题配置文件_config.butterfly.yml引入该文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inject: </span><br><span class="line">  bottom: </span><br><span class="line">+    - &lt;script async src=&quot;/js/custom.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ol><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="/images/blog/网站标题魔改/效果.png" alt="效果.png"></p><blockquote><p>tips: 网站图标更改： 替换文件themes/butterfly/source/img/favicon.png</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于时区的那些事</title>
      <link href="/2023/05/25/%E5%85%B3%E4%BA%8E%E6%97%B6%E5%8C%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
      <url>/2023/05/25/%E5%85%B3%E4%BA%8E%E6%97%B6%E5%8C%BA%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="C-中的时区"><a href="#C-中的时区" class="headerlink" title="C#中的时区"></a>C#中的时区</h2><p>先来看两种图：</p><p><img src="/images/software/timezone/CSharp中时间类型.png" alt="C#中时间类型.png"></p><p><img src="/images/software/timezone/当前时间结果.png" alt="当前时间结果.png"></p><p>可以看出时区utcnow显示的utc时间，而now显示的就是本地时间，而跨国的项目中为了保证时间的一致性，统一采用的utc时间，然后前台转换为本地时间进行显示。</p><p><img src="/images/software/timezone/time代码.png" alt="time代码.png"></p><h2 id="postgresql数据库"><a href="#postgresql数据库" class="headerlink" title="postgresql数据库"></a>postgresql数据库</h2><p>postgresql数据库支持时区格式存储，如</p><p><img src="/images/software/timezone/存储结果.png" alt="存储结果.png"></p><p>这是因为 PostgreSQL 在将时间戳类型的值从客户端转换为服务器内部的格式时，会自动将其转换为postgresql中设置的时区，从而保持时间的一致性。</p><p><img src="/images/software/timezone/postgres配置文件.png" alt="postgres配置文件.png"></p><p>如果你配置文件是其他时区的设置，比如GMT (格林尼治标准时间) ：UTC+0时区，那么数据库中存储的就是+0数据。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-01-10 03:15:57+00</span><br></pre></td></tr></table></figure><p>如果你希望插入一个特定时区的时间戳，可以通过在 timestamp with time zone 值后面添加时区偏移量的方式来表示。例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable (mytimestamp) <span class="keyword">VALUES</span> (<span class="string">&#x27;2023-05-22 00:12:22.238828+00&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> mytable (mytimestamp) <span class="keyword">VALUES</span> (<span class="string">&#x27;2023-05-22 00:12:22.238828+03&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这个例子插入的时间戳时区偏移量是 +08 和 +03，表示东八区时间和东三区。在这种情况下，插入的值会被转换为postgresql配置文件中设置的时区的utc时间，并存储到 mytable 表中（在数据库中存储的时间戳总是以 UTC 时间格式存储）。</p><h2 id="时区查询"><a href="#时区查询" class="headerlink" title="时区查询"></a>时区查询</h2><p><img src="/images/software/timezone/timezone的一些尝试.png" alt="timezone的一些尝试.png"></p><p>注意，在 PostgreSQL 中，当你查询一个 timestamp with time zone 类型的字段时，它会根据客户端设置的时区自动转换为本地时间。如果你想以其他时区的形式查询，可以使用 AT TIME ZONE 关键字来指定时区，例如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> mytimestamp <span class="keyword">AT</span> <span class="type">TIME</span> ZONE <span class="string">&#x27;UTC&#x27;</span> <span class="keyword">FROM</span> mytable;</span><br></pre></td></tr></table></figure><p>这个例子以 UTC 时区的形式查询 mytable 表中的 mytimestamp 字段。你可以将 UTC 替换为其他时区来查询该时区下的时间。</p><p>当你设置了其他时区,查出来的结果就是那个时区的时间，很智能。</p><p>但是你插入时间的值时，还是按照你数据库配置文件的时区的,不会因为set time zone而改变。 如果你的数据库配置文件中的时区是东八区，那么即使你执行了 set time zone “Africa/Bujumbura”;，在你插入 TIMESTAMP WITH TIME ZONE 类型的数据时，也会自动将其转换为东八区的时间，并存储在数据库中。</p><blockquote><p>tips: 修改了配置文件一定要重启数据库，否则还是原来的时区显示和插入。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postgresql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webp相对于png和jpg有什么优势</title>
      <link href="/2023/05/24/webp%E7%9B%B8%E5%AF%B9%E4%BA%8Epng%E5%92%8Cjpg%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E5%8A%BF/"/>
      <url>/2023/05/24/webp%E7%9B%B8%E5%AF%B9%E4%BA%8Epng%E5%92%8Cjpg%E6%9C%89%E4%BB%80%E4%B9%88%E4%BC%98%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<p>先放一个 WebP 转换的示例链接，可以直观感受 WebP 在图片大小上的优势。</p><p><img src="/images/software/webp对比png和jpg/直观对比感受.png" alt="直观对比感受.png"></p><p><a href="https://www.upyun.com/webp">WebP示例链接（GIF、PNG、JPG转Webp）</a></p><h2 id="webp的发展"><a href="#webp的发展" class="headerlink" title="webp的发展"></a>webp的发展</h2><p>WebP，是一种同时提供了有损压缩与无损压缩的图片文件格式，派生自视频编码格式 VP8。WebP 最初在2010年发布，目标是减少文件大小，但达到 和 JEPG 格式相同的图片质量，希望能够减少图片档在网络上的发送时间。2011年11月8日，Google 开始让 WebP 支持无损压缩和透明色的功能。</p><p>根据 Google 较早的测试，WebP 的无损压缩比网络上找到的PNG档少了45％的文件大小，即使这些 PNG 档在使用 PNGCRUSH 和 PNGOUT 处理过，WebP 还是可以减少28％的文件大小。就目前而言，Webp 可以让图片大小平均减少70%。WebP 是未来图片格式的发展趋势。</p><h2 id="应用场景及优势"><a href="#应用场景及优势" class="headerlink" title="应用场景及优势"></a>应用场景及优势</h2><ul><li>客户端软件，内嵌了基于 Chromium 的 webview，这类浏览器中应用的网页是可以完全使用WebP 格式，提升加载渲染速度，不考虑兼容。</li><li>用 node-webkit 开发的程序，用 WebP 可以减少文件包的体积。</li><li>移动应用 或 网页游戏 ,界面需要大量图片,可以嵌入 WebP 的解码包，能够节省用户流量，提升访问速度优势：</li><li>对于 PNG 图片，WebP 比 PNG 小了45%。</li></ul><h2 id="效果对比"><a href="#效果对比" class="headerlink" title="效果对比"></a>效果对比</h2><h3 id="有损-WebP-VS-JPG"><a href="#有损-WebP-VS-JPG" class="headerlink" title="有损 WebP VS JPG"></a>有损 WebP VS JPG</h3><p><img src="/images/software/webp对比png和jpg/有损 WebPVSJPG.png" alt="有损 WebPVSJPG.png"></p><p>当 WebP 将 JPG 压缩到相当于原图 90% 质量 时，图片体积减少了 50% 左右。当 WebP 将 JPG 压缩到相当于原图 80% 质量时，图片体积则减少了 60%~80%。</p><p>有损 WebP 压缩性能优于 JPG 的原因主要是其预测编码技术先进，并且宏块自适应量化也带来了压缩效率的提升，而布尔算术编码与霍夫曼编码相比提升了 5%~10% 的压缩性能。</p><h3 id="无损-WebP-对比-PNG"><a href="#无损-WebP-对比-PNG" class="headerlink" title="无损 WebP 对比 PNG"></a>无损 WebP 对比 PNG</h3><p><img src="/images/software/webp对比png和jpg/无损 WebP对比PNG.png" alt="无损 WebP对比PNG.png"></p><p>上图是 PNG 原图与 WebP 无损的对比，WebP 无损对 PNG 图片的优化到达了 20%~40% 。</p><p>更多：<br><a href="https://tech.upyun.com/article/253/1.html">都说 WebP 厉害，究竟厉害在哪里？（算法）</a></p>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic knowledge of computer </tag>
            
            <tag> website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站加载速度优化</title>
      <link href="/2023/05/24/%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/"/>
      <url>/2023/05/24/%E7%BD%91%E7%AB%99%E5%8A%A0%E8%BD%BD%E9%80%9F%E5%BA%A6%E4%BC%98%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="从多个方面入手："><a href="#从多个方面入手：" class="headerlink" title="从多个方面入手："></a>从多个方面入手：</h2><ol><li><p>压缩文件：可以使用压缩工具如GZip等将文件压缩后再传输。这样可以减小传输文件的体积，提升了传输速度。</p></li><li><p>CDN缓存：使用CDN可以将静态文件缓存到多个节点，让用户可以从离他们最近的节点请求文件来加快访问速度。</p></li><li><p>压缩图片、文件大小：一般情况下，图片比较大，可以使用图片压缩工具把图片大小减小，从而减少加载时间。</p></li></ol><p><img src="/images/software/网站加载速度优化/developertoolrequest.png" alt="developertoolrequest.png"></p><p>开发者工具中通过请求大小排序和请求时间排序就能清晰看出需要优化哪些请求。</p><p>从上图可以看出这前几个请求数据量占全部数据量的2/3，加载时间也较长。</p><p>请求如下： </p><p><a href="http://localhost:4000/font/%E6%BC%94%E7%A4%BA%E5%A4%8F%E8%A1%8C%E6%A5%B7.ttf">http://localhost:4000/font/%E6%BC%94%E7%A4%BA%E5%A4%8F%E8%A1%8C%E6%A5%B7.ttf</a> </p><p>ttf格式的字体文件较大，所以网站中不好不要选择这种字体格式文件。</p><p>加载音频也是很消耗时间的。</p><p><a href="https://m701.music.126.net/20230524231920/625b0da94fa66a8a0f8dce7d5c2a5727/jdymusic/obj/wo3DlMOGwrbDjj7DisKw/24873678347/92da/edc2/ceeb/1f0936988520d420a71609bc0d6ca45f.mp3">https://m701.music.126.net/20230524231920/625b0da94fa66a8a0f8dce7d5c2a5727/jdymusic/obj/wo3DlMOGwrbDjj7DisKw/24873678347/92da/edc2/ceeb/1f0936988520d420a71609bc0d6ca45f.mp3</a></p><p>网站中的图片最好也是通过压缩的，使用源图片大小都在几MB，甚至十几MB，传输速率下降。图片最好选用webp格式。</p><p><a href="http://localhost:4000/assets/background.jpg">http://localhost:4000/assets/background.jpg</a></p><ol><li><p>去掉重复的代码：可以去掉多余的代码，例如多余的CSS、JavaScript、图片和HTML标记，从而减少文件的大小，增加载入速度。</p></li><li><p>使用最新的HTTP协议：最新的HTTP协议可以优化网站加载速度，例如HTTP/2使用多路复用技术，可以在一次连接中同时传输多个文件，从而提升传输速度。</p></li><li><p>增加服务器带宽：考虑增加带宽，提高网站服务器的同时连接数。</p></li><li><p>优化服务器：使用高效的Web服务器软件，如nginx等，进行服务器端优化，增强服务器的处理速度。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Software </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Optimization </tag>
            
            <tag> Website </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CPU知识</title>
      <link href="/2023/05/24/CPU%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/05/24/CPU%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AI网站集合</title>
      <link href="/2023/05/23/AI%E7%BD%91%E7%AB%99%E9%9B%86%E5%90%88/"/>
      <url>/2023/05/23/AI%E7%BD%91%E7%AB%99%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="图像AI"><a href="#图像AI" class="headerlink" title="图像AI"></a>图像AI</h2><ol><li>DragGAN</li></ol><p>通过交互式精确变形图像的 DragGAN 刷屏 AI 业界学界</p><p>DragGAN 可将图像中的任意部分精确”拖动”到目标位置，从而操纵动物、汽车、人类、风景等不同类别的姿势、形状、表情和布局。当给定想要移动的部分 (操纵点) 和想要移动到的位置 (目标点)，AI就会驱动操纵点精确到达相应的目标点。用户也可以局部绘制 (掩码)，使掩码以外的部分固定不变。、</p><p><a href="https://vcai.mpi-inf.mpg.de/projects/DragGAN/">https://vcai.mpi-inf.mpg.de/projects/DragGAN/</a></p><ol><li>Blockade Labs</li></ol><p>Skybox AI 图像生成器的 Sketch 模式，该模式可根据您绘制的线条和文本提示创建环境。</p><p>Blockade Labs (<a href="http://skybox.blockadelabs.com/">http://skybox.blockadelabs.com/</a>)</p><ol><li>🚀 探索最佳AI绘画提示词工具：175Ai 🚀</li></ol><p>🔥 175Ai提供国内最好用的可视化AI提示词工具，让你的创作过程更加轻松愉快！</p><p>🎨 175Ai的三大亮点：<br>1️⃣ 提示词工具：上千种可视化提示词，简单易上手，为midjourney、stablediffusion、dalle等AI应用提供可视化帮助。<br>2️⃣ 每日灵感：每日更新极品提示词作品，一键免费复制，发现更多灵感。<br>3️⃣ AI业内快讯：掌握最新的AI动态，跟上行业发展步伐。</p><p>🌐 电脑网页端： www.175.ai<br>📱 微信小程序客户端：175Ai</p>]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加深爱国-10043号总统公告</title>
      <link href="/2023/05/23/%E5%8A%A0%E6%B7%B1%E7%88%B1%E5%9B%BD-10043%E5%8F%B7%E6%80%BB%E7%BB%9F%E5%85%AC%E5%91%8A/"/>
      <url>/2023/05/23/%E5%8A%A0%E6%B7%B1%E7%88%B1%E5%9B%BD-10043%E5%8F%B7%E6%80%BB%E7%BB%9F%E5%85%AC%E5%91%8A/</url>
      
        <content type="html"><![CDATA[<h2 id="10043号总统公告内容"><a href="#10043号总统公告内容" class="headerlink" title="10043号总统公告内容"></a>10043号总统公告内容</h2><p>特朗普在2020年5月签署了总统令PP10043，该行政令规定在签证审核中，签证官可以因为学生学者就读专业以及研究方向，毕业于特定高校（北航，北理工，哈工大，哈工程，西工大，南理工南航等学校），或者学生受CSC资助等为由，而拒绝发放赴美签证。</p><p>“暂停和限制”包括目前或曾经受雇于实施或支持军民融合战略的机构，在实施或支持军民融合战略的机构学习或做研究的相关人员寻求通过 F 或 J 签证进入美国学习或进行美国研究的任何中国公民的非移民入境美国，同时，但寻求本科学习的学生除外。</p><p>注： 敏感大学艺术生都会被拒签，10043法令牵扯的不仅仅是STEM理科生.</p><p>影响的学生大多都毕业于10043提到的特定学校计划前往美国高校攻读STEM专业的硕士或博士研究生学位。</p><h2 id="STEM"><a href="#STEM" class="headerlink" title="STEM"></a>STEM</h2><blockquote><p>STEM由科学（Science）、技术（Technology）、工程（Engineering）和数学（Mathematics）四部分的首字母组成。是美国鼓励学生主修科学、技术、工程及数学的一项计划。在美国国土安全局网站上可以查到一个长长的属于STEM计划的专业列表，比如化工、计算机科学、物理、数学、生物科学和航空航天等理工科。</p><p>STEM专业包括工程类、生物科学、数学、物理科学及相关领域专业。</p></blockquote><h2 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h2><p>如果你现在正就读于敏感院校，并且有在硕士或博士阶段留学的打算，那么在未来准备申请阶段必须要考虑英国，加拿大或者欧洲其他大学。</p><p>如果你正在就读于非敏感大学的敏感专业，可以先放宽心申请，但是一定要给自己计划好Plan B，如果被拒签至少不会落到没学上的地步。</p><p>如果原本为孩子计划本科在国内读STEM专业，硕士去美国读的话，可以考虑考虑是否要本科阶段就直接出国读</p>]]></content>
      
      
      <categories>
          
          <category> Notice </category>
          
      </categories>
      
      
        <tags>
            
            <tag> notice </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环神经网络RNN</title>
      <link href="/2023/05/19/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CRNN/"/>
      <url>/2023/05/19/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9CRNN/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> AI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deep learning </tag>
            
            <tag> neural network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS污染</title>
      <link href="/2023/05/19/DNS%E6%B1%A1%E6%9F%93/"/>
      <url>/2023/05/19/DNS%E6%B1%A1%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是DNS污染"><a href="#什么是DNS污染" class="headerlink" title="什么是DNS污染"></a>什么是DNS污染</h2><p>DNS污染又称域名污染”、“域名欺骗”和“域名服务缓存投毒”，是指通过制作域名服务数据包，将域名指向不正确的IP地址。</p><p>在正常的DNS解析过程中，下一级域名服务器会将从上游域名服务器获得的解析记录保存一段时间，当在TTL值失效之前，有相同域名的解析请求时，就会直接将解析记录告知客户端，而无需进行全球范围的递归查询，这样既加快了查询时间，同时也降低了服务器工作压力。</p><p>但在这个过程中，如果局域域名服务器的缓存受到污染，就会告知客户端错误的解析记录，从而将用户指向错误的网站。这种攻击方式，被称为DNS污染。</p><h2 id="常见场景"><a href="#常见场景" class="headerlink" title="常见场景"></a>常见场景</h2><p>某些网络运营商为了达成某些目的，对DNS进行某些操作，就会导致使用ISP正常上网设置无法通过域名访问正确的IP地址。如果掌握了部分国际DNS根目录服务器或镜像，也可以通过DNS污染的方式，屏蔽对特定网站的访问。</p><p>许多国内被禁止的网站都是通过DNS污染实现的，如google、YouTube等网站无法直接访问都是通过DNS污染方式实现的。</p><p>因为<a href="http://google.com的服务器在国外，所以在访问时DNS解析必须转到国际带宽的输出，然后会被GFW捕获。由于DNS使用UDP协议，而UDP没有验证机制，只需发送即可。因此，此时GFW伪装成一个相应的DNS服务器，就会返回错误的地址信息。">http://google.com的服务器在国外，所以在访问时DNS解析必须转到国际带宽的输出，然后会被GFW捕获。由于DNS使用UDP协议，而UDP没有验证机制，只需发送即可。因此，此时GFW伪装成一个相应的DNS服务器，就会返回错误的地址信息。</a></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol><li>解决方案1：需要能够替换DNS解析服务器。通常，域名注册企业提供免费的DNS解析服务。域名提供商可以提供许多免费的DNS解析服务，并且其解析速度非常快，多组DNS服务器，可以更好地避免被DNS污染。</li><li>解决方案2：使用第三方DNS解析服务，以及使用CDN服务，CDN服务商会提供他们的DNS服务器解析服务和CDN的网络IP地址 。</li></ol><blockquote><p>注：GFW（Great Firewall of China）是一个集中的官方项目，旨在控制和监管互联网及其内容。该项目使用一系列技术手段实现其目标，其中包括DNS污染、IP封锁和Deep Packet Inspection（DPI）技术等。这些技术可以检测和过滤流经中国边境的数据流量，屏蔽不符合规定的数据包。具体来说，GFW在客户端和服务器之间建立了一个过滤器，它通过检查网络传输中的IP地址、域名和URL等元数据，以及数据报文中的内容和协议等信息，判断该数据流是否违反防火墙规定。若此内容被识别为敏感或违规，则会被GFW阻止，使用户无法访问相关网站和服务。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Network </category>
          
      </categories>
      
      
        <tags>
            
            <tag> network </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客文章三栏</title>
      <link href="/2023/05/14/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E4%B8%89%E6%A0%8F/"/>
      <url>/2023/05/14/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E4%B8%89%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<ol><li>修改[BlogRoot]\themes\butterfly\layout\includes\mixins\post-ui.pug,整个替换为下面的代码，注意，我这里用的是彩色的图标，每个//- i.fas那里表示我注释了黑白的额图标并换上彩色图标，彩色图标引入的具体方法见之前的教程，这里只需要替换成你自己的图标名字和调节相应的大小即可：</li></ol><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br></pre></td><td class="code"><pre><span class="line">mixin postUI(posts)</span><br><span class="line">  each article , index in page.posts.data</span><br><span class="line">    .recent-post-item</span><br><span class="line">      -</span><br><span class="line">        let link = article.link || article.path</span><br><span class="line">        let title = article.title || _p(&#x27;no_title&#x27;)</span><br><span class="line">        const position = theme.cover.position</span><br><span class="line">        let leftOrRight = position === &#x27;both&#x27;</span><br><span class="line">          ? index%2 == 0 ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">          : position === &#x27;left&#x27; ? &#x27;left&#x27; : &#x27;right&#x27;</span><br><span class="line">        let post_cover = article.cover</span><br><span class="line">        let no_cover = article.cover === false || !theme.cover.index_enable ? &#x27;no-cover&#x27; : &#x27;&#x27;</span><br><span class="line">      -</span><br><span class="line">      .recent-post-content(class=leftOrRight)</span><br><span class="line">        .recent-post-cover</span><br><span class="line">          img.article-cover(src=url_for(post_cover) onerror=`this.onerror=null;this.src=&#x27;`+ url_for(theme.error_img.post_page) + `&#x27;` alt=title)</span><br><span class="line">        .recent-post-info</span><br><span class="line">          a.article-title(href=url_for(link) title=title)</span><br><span class="line">            .article-title-link= title</span><br><span class="line">          .recent-post-meta                </span><br><span class="line">            .article-meta-wrap</span><br><span class="line">              if (is_home() &amp;&amp; (article.top || article.sticky &gt; 0))</span><br><span class="line">                span.article-meta</span><br><span class="line">                  //- i.fas.fa-thumbtack.sticky</span><br><span class="line">                  svg.meta_icon(style=&quot;width:16px;height:16px;position:relative;top:3px&quot;).post-ui-icon</span><br><span class="line">                    use(xlink:href=&#x27;#icon-tuding&#x27;)</span><br><span class="line">                  span.sticky= _p(&#x27;sticky&#x27;)</span><br><span class="line">                  span.article-meta-separator  | </span><br><span class="line">              if (theme.post_meta.page.date_type)</span><br><span class="line">                span.post-meta-date</span><br><span class="line">                  if (theme.post_meta.page.date_type === &#x27;both&#x27;)</span><br><span class="line">                    //- i.far.fa-calendar-alt</span><br><span class="line">                    svg.meta_icon(style=&quot;width:21px;height:21px;position:relative;top:6px&quot;).post-ui-icon</span><br><span class="line">                      use(xlink:href=&#x27;#icon-rili&#x27;)</span><br><span class="line">                    span.article-meta-label=_p(&#x27;post.created&#x27;)</span><br><span class="line">                    time.post-meta-date-created(datetime=date_xml(article.date) title=_p(&#x27;post.created&#x27;) + &#x27; &#x27; + full_date(article.date))=date(article.date, config.date_format)</span><br><span class="line">                    span.article-meta-separator  | </span><br><span class="line">                    //- i.fas.fa-history</span><br><span class="line">                    svg.meta_icon(style=&quot;width:13px;height:13px;position:relative;top:2px&quot;).post-ui-icon</span><br><span class="line">                      use(xlink:href=&#x27;#icon-gengxin1&#x27;)                    </span><br><span class="line">                    span.article-meta-label=_p(&#x27;post.updated&#x27;) + &quot; &quot;</span><br><span class="line">                    time.post-meta-date-updated(datetime=date_xml(article.updated) title=_p(&#x27;post.updated&#x27;) + &#x27; &#x27; + full_date(article.updated))=date(article.updated, config.date_format)</span><br><span class="line">                  else</span><br><span class="line">                    - let data_type_updated = theme.post_meta.page.date_type === &#x27;updated&#x27;</span><br><span class="line">                    - let date_type = data_type_updated ? &#x27;updated&#x27; : &#x27;date&#x27;</span><br><span class="line">                    - let date_icon = data_type_updated ? &#x27;fas fa-history&#x27; :&#x27;far fa-calendar-alt&#x27;</span><br><span class="line">                    - let date_title = data_type_updated ? _p(&#x27;post.updated&#x27;) : _p(&#x27;post.created&#x27;)</span><br><span class="line">                    i(class=date_icon)</span><br><span class="line">                    span.article-meta-label=date_title</span><br><span class="line">                    time(datetime=date_xml(article[date_type]) title=date_title + &#x27; &#x27; + full_date(article[date_type]))=date(article[date_type], config.date_format)</span><br><span class="line">              if (theme.post_meta.page.categories &amp;&amp; article.categories.data.length &gt; 0)</span><br><span class="line">                span.article-meta</span><br><span class="line">                  span.article-meta-separator  | </span><br><span class="line">                  //- i.fas.fa-inbox</span><br><span class="line">                  svg.meta_icon(style=&quot;width:12px;height:12px;position:relative;top:1px&quot;).post-ui-icon</span><br><span class="line">                    use(xlink:href=&#x27;#icon-fenlei&#x27;)</span><br><span class="line">                  each item, index in article.categories.data</span><br><span class="line">                    a(href=url_for(item.path)).article-meta__categories #[=item.name]</span><br><span class="line">                    if (index &lt; article.categories.data.length - 1)</span><br><span class="line">                      i.fas.fa-angle-right.article-meta-link</span><br><span class="line">              if (theme.post_meta.page.tags &amp;&amp; article.tags.data.length &gt; 0)</span><br><span class="line">                span.article-meta.tags</span><br><span class="line">                  span.article-meta-separator  | </span><br><span class="line">                  //- i.fas.fa-tag</span><br><span class="line">                  svg.meta_icon(style=&quot;width:13px;height:13px;position:relative;top:2px&quot;).post-ui-icon</span><br><span class="line">                    use(xlink:href=&#x27;#icon-biaoqian&#x27;)</span><br><span class="line">                  each item, index in article.tags.data</span><br><span class="line">                    a(href=url_for(item.path)).article-meta__tags #[=item.name]</span><br><span class="line">                    if (index &lt; article.tags.data.length - 1)</span><br><span class="line">                      span.article-meta-link #[=&#x27; • &#x27;]</span><br><span class="line">              </span><br><span class="line">              mixin countBlockInIndex</span><br><span class="line">                - needLoadCountJs = true</span><br><span class="line">                span.article-meta</span><br><span class="line">                  span.article-meta-separator  | </span><br><span class="line">                  //- i.fas.fa-comments</span><br><span class="line">                  svg.meta_icon(style=&quot;width:13px;height:13px;position:relative;top:2px&quot;).post-ui-icon</span><br><span class="line">                    use(xlink:href=&#x27;#icon-pinglun1&#x27;)</span><br><span class="line">                  if block</span><br><span class="line">                    block</span><br><span class="line">                  span.article-meta-label= &#x27; &#x27; + _p(&#x27;card_post_count&#x27;)</span><br><span class="line">              </span><br><span class="line">              if theme.comments.card_post_count</span><br><span class="line">                case theme.comments.use[0]</span><br><span class="line">                  when &#x27;Disqus&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=full_url_for(link) + &#x27;#disqus_thread&#x27;)</span><br><span class="line">                        i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Disqusjs&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=full_url_for(link) + &#x27;#disqusjs&#x27;)</span><br><span class="line">                        span.disqus-comment-count(data-disqus-url=full_url_for(link))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Valine&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.valine-comment-count(data-xid=url_for(link))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Waline&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.waline-comment-count(id=url_for(link))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Twikoo&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a.twikoo-count(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Facebook Comments&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.fb-comments-count(data-href=urlNoIndex(article.permalink))</span><br><span class="line">                  when &#x27;Remark42&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.remark42__counter(data-url=urlNoIndex(article.permalink))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin</span><br><span class="line">                  when &#x27;Artalk&#x27;</span><br><span class="line">                    +countBlockInIndex</span><br><span class="line">                      a(href=url_for(link) + &#x27;#post-comment&#x27;)</span><br><span class="line">                        span.artalk-count(data-page-key=url_for(link))</span><br><span class="line">                          i.fa-solid.fa-spinner.fa-spin      </span><br><span class="line">        a.article-content(href=url_for(link) title=title)</span><br><span class="line">          //- Display the article introduction on homepage</span><br><span class="line">          case theme.index_post_content.method</span><br><span class="line">            when false</span><br><span class="line">              - break</span><br><span class="line">            when 1</span><br><span class="line">              .article-content-text!= article.description</span><br><span class="line">            when 2</span><br><span class="line">              if article.description</span><br><span class="line">                .article-content-text!= article.description</span><br><span class="line">              else</span><br><span class="line">                - const content = strip_html(article.content)</span><br><span class="line">                - let expert = content.substring(0, theme.index_post_content.length) </span><br><span class="line">                - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">                .article-content-text!= expert</span><br><span class="line">            default</span><br><span class="line">              - const content = strip_html(article.content)</span><br><span class="line">              - let expert = content.substring(0, theme.index_post_content.length) </span><br><span class="line">              - content.length &gt; theme.index_post_content.length ? expert += &#x27; ...&#x27; : &#x27;&#x27;</span><br><span class="line">              .article-content-text!= expert      </span><br><span class="line">        .recent-post-arrow</span><br><span class="line"></span><br><span class="line">    if theme.ad &amp;&amp; theme.ad.index</span><br><span class="line">      if (index + 1) % 3 == 0</span><br><span class="line">        .recent-post-item.ads-wrap!=theme.ad.index</span><br></pre></td></tr></table></figure><ol><li>样式方案提供两种：</li></ol><p>样式一：电脑端宽屏采用滑动卡片，平板宽度采用双栏布局，手机宽度采用单栏卡片</p><p>样式二：移除滑动卡片，按屏幕宽度依次应用三栏、双栏、单栏</p><p>新建目录[BlogRoot]\themes\butterfly\source\css_index_card_style\,并在下面新建对应的文件slidecard.styl和multicard.styl并分别填入以下内容，第一个滑动卡片的是店长原版的，我微调一下第二个的样式，大家可以根据自己的选择进行修改：</p><div class="tabs" id="短视频"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#短视频-1">样式一: slidecard</button></li><li class="tab"><button type="button" data-href="#短视频-2">样式二：multicard(微调)</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="短视频-1"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line">//default color:</span><br><span class="line">:root</span><br><span class="line">  --recent-post-bgcolor: rgba(255, 255, 255, 0.9)  //默认背景</span><br><span class="line">  --article-content-bgcolor: #49b1f5 //描述版块背景</span><br><span class="line">  --recent-post-arrow: #ffffff //箭头配色</span><br><span class="line">  --recent-post-cover-shadow: #ffffff //封面遮罩层配色，建议和默认值的颜色相对应。</span><br><span class="line">  --recent-post-transition: all 0.5s cubic-bezier(0.59, 0.01, 0.48, 1.17)  //动画效果。不了解的不要改动</span><br><span class="line">[data-theme=&quot;dark&quot;]</span><br><span class="line">  --recent-post-bgcolor: rgba(35,35,35,0.5)</span><br><span class="line">  --article-content-bgcolor: #99999a</span><br><span class="line">  --recent-post-arrow: #37e2dd</span><br><span class="line">  --recent-post-cover-shadow: #232323</span><br><span class="line">// 默认的首页卡片容器布局</span><br><span class="line">.recent-posts</span><br><span class="line">  padding 0 15px 0 15px</span><br><span class="line">  height fit-content</span><br><span class="line">  .recent-post-item</span><br><span class="line">    margin-bottom 15px</span><br><span class="line">    width 100%</span><br><span class="line">    background var(--recent-post-bgcolor)</span><br><span class="line">    overflow hidden</span><br><span class="line">    border-radius 15px</span><br><span class="line">    .recent-post-content</span><br><span class="line">      display flex</span><br><span class="line">      background var(--recent-post-bgcolor)</span><br><span class="line">      position relative</span><br><span class="line">      .recent-post-cover</span><br><span class="line">        display flex</span><br><span class="line">        background transparent</span><br><span class="line">      .recent-post-info</span><br><span class="line">        display flex</span><br><span class="line">        background transparent</span><br><span class="line">        flex-direction column</span><br><span class="line">        justify-content center</span><br><span class="line">        align-items center</span><br><span class="line">        .article-title</span><br><span class="line">          height 50%</span><br><span class="line">          display: flex</span><br><span class="line">          text-align: center</span><br><span class="line">          align-items: center</span><br><span class="line">          justify-content: flex-end</span><br><span class="line">          flex-direction: column</span><br><span class="line">          .article-title-link</span><br><span class="line">            color: var(--text-highlight-color)</span><br><span class="line">            transition: all .2s ease-in-out</span><br><span class="line">            display: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            &amp;:hover</span><br><span class="line">              color: $text-hover</span><br><span class="line">        .recent-post-meta</span><br><span class="line">          height 50%</span><br><span class="line">          display: flex</span><br><span class="line">          text-align: center</span><br><span class="line">          align-items: center</span><br><span class="line">          justify-content: flex-start</span><br><span class="line">          flex-direction: column</span><br><span class="line">          .article-meta-wrap</span><br><span class="line">            color #969797</span><br><span class="line">            display: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            a</span><br><span class="line">              color: var(--text-highlight-color)</span><br><span class="line">              transition: all .2s ease-in-out</span><br><span class="line">              color #969797</span><br><span class="line">              &amp;:hover</span><br><span class="line">                color: $text-hover</span><br><span class="line">      .article-content</span><br><span class="line">        display flex</span><br><span class="line">        text-align: center</span><br><span class="line">        flex-direction row</span><br><span class="line">        align-items center</span><br><span class="line">        justify-content center</span><br><span class="line">        .article-content-text</span><br><span class="line">          display -webkit-box</span><br><span class="line">          -webkit-box-orient vertical</span><br><span class="line">          text-overflow: ellipsis</span><br><span class="line">          overflow hidden</span><br><span class="line">          color #fff</span><br><span class="line">          text-shadow 1px 2px 3px #000</span><br><span class="line">          &amp;::before</span><br><span class="line">            content &quot;❝&quot;</span><br><span class="line">            font-size 20px</span><br><span class="line">          &amp;::after</span><br><span class="line">            content &quot;❞&quot;</span><br><span class="line">            font-size 20px</span><br><span class="line">    &amp;.ads-wrap</span><br><span class="line">      display: block !important</span><br><span class="line">      height: auto !important</span><br><span class="line">// PC端滑动卡片样式</span><br><span class="line">@media screen and (min-width:1069px)</span><br><span class="line">  .recent-posts</span><br><span class="line">    padding 0 15px 0 15px</span><br><span class="line">    .recent-post-item</span><br><span class="line">      .recent-post-content</span><br><span class="line">        position relative</span><br><span class="line">        height 200px</span><br><span class="line">        width 100%</span><br><span class="line">        transition var(--recent-post-transition)</span><br><span class="line">        &amp;:hover</span><br><span class="line">          .recent-post-cover-shadow</span><br><span class="line">            width 10.1%</span><br><span class="line">            transition var(--recent-post-transition)</span><br><span class="line">          .recent-post-cover</span><br><span class="line">            width 10%</span><br><span class="line">            transition var(--recent-post-transition)</span><br><span class="line">          .article-content</span><br><span class="line">            width calc(30% + 80px)</span><br><span class="line">            transition var(--recent-post-transition)</span><br><span class="line">            .article-content-text</span><br><span class="line">              opacity 1</span><br><span class="line">          .recent-post-arrow</span><br><span class="line">            transition var(--recent-post-transition)</span><br><span class="line">        .recent-post-cover-shadow</span><br><span class="line">          z-index: 1</span><br><span class="line">          transition var(--recent-post-transition)</span><br><span class="line">          position: absolute</span><br><span class="line">          height 200px</span><br><span class="line">          width 40%</span><br><span class="line">        .recent-post-cover</span><br><span class="line">          height 200px</span><br><span class="line">          width 40%</span><br><span class="line">          transition var(--recent-post-transition)</span><br><span class="line">          img</span><br><span class="line">            height 100%</span><br><span class="line">            width 100%</span><br><span class="line">            object-fit cover</span><br><span class="line"></span><br><span class="line">        .recent-post-info</span><br><span class="line">          height 200px</span><br><span class="line">          width calc(60% - 80px)</span><br><span class="line">          .article-title</span><br><span class="line">            margin: 0px 40px</span><br><span class="line">            font-size 24px</span><br><span class="line">            .article-title-link</span><br><span class="line">              -webkit-line-clamp: 2;</span><br><span class="line">          .recent-post-meta</span><br><span class="line">            margin: 0px 20px</span><br><span class="line">            .article-meta-wrap</span><br><span class="line">              font-size 12px</span><br><span class="line">              -webkit-line-clamp: 3;</span><br><span class="line">        .article-content</span><br><span class="line">          height 200px</span><br><span class="line">          width 90px</span><br><span class="line">          background var(--article-content-bgcolor)</span><br><span class="line">          transition var(--recent-post-transition)</span><br><span class="line">          .article-content-text</span><br><span class="line">            -webkit-line-clamp 4</span><br><span class="line">            transition: var(--recent-post-transition)</span><br><span class="line">            opacity 0</span><br><span class="line">        .recent-post-arrow</span><br><span class="line">          transition var(--recent-post-transition)</span><br><span class="line">          display block</span><br><span class="line">          position absolute</span><br><span class="line">          height 20px</span><br><span class="line">          width 8px</span><br><span class="line">          background var(--recent-post-arrow)</span><br><span class="line">        &amp;.both,</span><br><span class="line">        &amp;.right</span><br><span class="line">          .recent-post-cover-shadow</span><br><span class="line">            left 0</span><br><span class="line">            background linear-gradient(to left, var(--recent-post-cover-shadow), transparent)</span><br><span class="line">          .recent-post-cover</span><br><span class="line">            order: 1</span><br><span class="line">          .recent-post-info</span><br><span class="line">            order: 2</span><br><span class="line">          .article-content</span><br><span class="line">            order: 3</span><br><span class="line">            clip-path polygon(0 50%, 80px 0, 100% 0, 100% 100%, 80px 100%)</span><br><span class="line">            .article-content-text</span><br><span class="line">              margin 20px 40px 20px 80px</span><br><span class="line">          .recent-post-arrow</span><br><span class="line">            order: 4</span><br><span class="line">            left calc(100% - 80px)</span><br><span class="line">            top calc(50% - 10px)</span><br><span class="line">            clip-path polygon(0 10px, 8px 0, 8px 20px)</span><br><span class="line">          &amp;:hover</span><br><span class="line">            .recent-post-arrow</span><br><span class="line">              left calc(100% - 40px)</span><br><span class="line">        &amp;.left</span><br><span class="line">          .recent-post-cover-shadow</span><br><span class="line">            right 0</span><br><span class="line">            background linear-gradient(to right, var(--recent-post-cover-shadow), transparent)</span><br><span class="line">          .recent-post-cover</span><br><span class="line">            order: 4</span><br><span class="line">          .recent-post-info</span><br><span class="line">            order: 3</span><br><span class="line">          .article-content</span><br><span class="line">            order: 2</span><br><span class="line">            clip-path polygon(100% 50%,calc(100% - 80px) 100%,0 100%,0 0,calc(100% - 80px) 0)</span><br><span class="line">            .article-content-text</span><br><span class="line">              margin 20px 80px 20px 40px</span><br><span class="line">          .recent-post-arrow</span><br><span class="line">            order: 1</span><br><span class="line">            left 72px</span><br><span class="line">            top calc(50% - 10px)</span><br><span class="line">            clip-path polygon(0 0, 8px 10px, 0 20px)</span><br><span class="line">          &amp;:hover</span><br><span class="line">            .recent-post-arrow</span><br><span class="line">              left 32px</span><br><span class="line">// 双栏布局卡片自适应适配</span><br><span class="line">@media screen and (min-width:572px) and (max-width:1068px)</span><br><span class="line">  .recent-posts</span><br><span class="line">    padding 0 15px 0 15px</span><br><span class="line">    display flex</span><br><span class="line">    flex-direction row</span><br><span class="line">    flex-wrap wrap</span><br><span class="line">    .recent-post-item</span><br><span class="line">      border-radius 15px</span><br><span class="line">      overflow hidden</span><br><span class="line">      width 47%</span><br><span class="line">      margin 0px 3% 20px 0px</span><br><span class="line">    nav#pagination</span><br><span class="line">      width: 100%</span><br><span class="line">// 手机端单栏布局自适应适配</span><br><span class="line">@media screen and (max-width:572px)</span><br><span class="line">  .recent-posts</span><br><span class="line">    padding 0 15px 0 15px</span><br><span class="line">    .recent-post-item</span><br><span class="line">      border-radius 15px</span><br><span class="line">      overflow hidden</span><br><span class="line">        </span><br><span class="line">// 手机端及双栏卡片样式</span><br><span class="line">@media screen and (max-width:1068px)</span><br><span class="line">  .recent-posts</span><br><span class="line">    .recent-post-item</span><br><span class="line">      .recent-post-content</span><br><span class="line">        flex-direction column</span><br><span class="line">        flex-wrap nowrap</span><br><span class="line">        align-items center</span><br><span class="line">        max-height 350px</span><br><span class="line">        height: auto </span><br><span class="line">        width 100%</span><br><span class="line">        .recent-post-cover</span><br><span class="line">          width 100%</span><br><span class="line">          height 200px</span><br><span class="line">          clip-path polygon(0 130px,0 0,100% 0,100% 130px,50% 100%)</span><br><span class="line">          img</span><br><span class="line">            height 200px</span><br><span class="line">            width 100%</span><br><span class="line">            object-fit cover</span><br><span class="line">        .recent-post-info</span><br><span class="line">          height 150px</span><br><span class="line">          width 100%</span><br><span class="line">          padding 0px 25px 5px 25px</span><br><span class="line">          .article-title</span><br><span class="line">            margin: 0px 40px</span><br><span class="line">            font-size 18px</span><br><span class="line">            .article-title-link</span><br><span class="line">              -webkit-line-clamp: 2;</span><br><span class="line">          .recent-post-meta</span><br><span class="line">            margin: 0px 20px</span><br><span class="line">            .article-meta-wrap</span><br><span class="line">              font-size 12px</span><br><span class="line">              -webkit-line-clamp: 3;</span><br><span class="line">        .article-content</span><br><span class="line">          position absolute</span><br><span class="line">          height 200px</span><br><span class="line">          width 100%</span><br><span class="line">          background rgba(25,25,25,0.5)</span><br><span class="line">          clip-path polygon(0 130px,0 0,100% 0,100% 130px,50% 100%)</span><br><span class="line">          .article-content-text</span><br><span class="line">            -webkit-line-clamp 3</span><br><span class="line">            font-size 16px</span><br><span class="line">            margin 0px 25px 30px 25px</span><br><span class="line">        .recent-post-arrow</span><br><span class="line">          display block</span><br><span class="line">          background var(--article-content-bgcolor)</span><br><span class="line">          position absolute</span><br><span class="line">          height 10px</span><br><span class="line">          width 20px</span><br><span class="line">          clip-path polygon(0 0,100% 0,50% 100%)</span><br><span class="line">          top 20px</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="短视频-2"><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line">:root</span><br><span class="line">  --theme-color:rgb(57, 197, 187)</span><br><span class="line">  --text-bg-hover:rgba(57, 197, 187, 0.7)</span><br><span class="line">  </span><br><span class="line">.recent-posts</span><br><span class="line">  padding 0 5px 0 5px</span><br><span class="line">  height fit-content</span><br><span class="line">  .recent-post-item</span><br><span class="line">    margin-bottom 15px</span><br><span class="line">    overflow hidden</span><br><span class="line">    border-radius 15px</span><br><span class="line">    .recent-post-content</span><br><span class="line">      display flex</span><br><span class="line">      position relative</span><br><span class="line">      .recent-post-cover</span><br><span class="line">        display flex</span><br><span class="line">        background transparent</span><br><span class="line">      .recent-post-info</span><br><span class="line">        display flex</span><br><span class="line">        background transparent</span><br><span class="line">        flex-direction column</span><br><span class="line">        justify-content center</span><br><span class="line">        align-items center</span><br><span class="line">        .article-title</span><br><span class="line">          height 50%</span><br><span class="line">          display: flex</span><br><span class="line">          text-align: center</span><br><span class="line">          align-items: center</span><br><span class="line">          justify-content: flex-end</span><br><span class="line">          flex-direction: column</span><br><span class="line">          .article-title-link</span><br><span class="line">            color: var(--text-highlight-color)</span><br><span class="line">            transition: all .2s ease-in-out</span><br><span class="line">            display: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            &amp;:hover</span><br><span class="line">              color: var(--theme-color)</span><br><span class="line">        .recent-post-meta</span><br><span class="line">          height 50%</span><br><span class="line">          display: flex</span><br><span class="line">          text-align: center</span><br><span class="line">          align-items: center</span><br><span class="line">          justify-content: flex-start</span><br><span class="line">          flex-direction: column</span><br><span class="line">          .article-meta-wrap</span><br><span class="line">            color #969797</span><br><span class="line">            display: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            a</span><br><span class="line">              color: var(--text-highlight-color)</span><br><span class="line">              transition: all .2s ease-in-out</span><br><span class="line">              color #969797</span><br><span class="line">              &amp;:hover</span><br><span class="line">                color: var(--theme-color)</span><br><span class="line">      .article-content</span><br><span class="line">        display flex</span><br><span class="line">        text-align: center</span><br><span class="line">        flex-direction row</span><br><span class="line">        align-items center</span><br><span class="line">        justify-content center</span><br><span class="line">        .article-content-text</span><br><span class="line">          display -webkit-box</span><br><span class="line">          -webkit-box-orient vertical</span><br><span class="line">          text-overflow: ellipsis</span><br><span class="line">          overflow hidden</span><br><span class="line">          color #fff</span><br><span class="line">          text-shadow 1px 2px 3px #000</span><br><span class="line">          transition transform 0.6s;</span><br><span class="line">          &amp;:hover</span><br><span class="line">            transform: scale(1.1);</span><br><span class="line">    &amp;.ads-wrap</span><br><span class="line">      display: block !important</span><br><span class="line">      height: auto !important</span><br><span class="line">  nav#pagination</span><br><span class="line">    width: 100%</span><br><span class="line">// 卡片单元布局样式</span><br><span class="line">.recent-posts</span><br><span class="line">  padding 0 5px 0 5px</span><br><span class="line">  display flex</span><br><span class="line">  flex-direction row</span><br><span class="line">  flex-wrap wrap</span><br><span class="line">  .recent-post-item</span><br><span class="line">    border-radius 15px</span><br><span class="line">    overflow hidden</span><br><span class="line">    .recent-post-content</span><br><span class="line">      flex-direction column</span><br><span class="line">      flex-wrap nowrap</span><br><span class="line">      align-items center</span><br><span class="line">      max-height 350px</span><br><span class="line">      height: auto</span><br><span class="line">      width 100%</span><br><span class="line">      .recent-post-cover</span><br><span class="line">        width 100%</span><br><span class="line">        height 200px</span><br><span class="line">        clip-path polygon(0 130px,0 0,100% 0,100% 130px,50% 100%)</span><br><span class="line">        img</span><br><span class="line">          height 200px</span><br><span class="line">          width 100%</span><br><span class="line">          object-fit cover</span><br><span class="line">      .recent-post-info</span><br><span class="line">        height 145px</span><br><span class="line">        width 100%</span><br><span class="line">        padding 0px 25px 5px 25px</span><br><span class="line">        .article-title</span><br><span class="line">          margin: 0px 40px</span><br><span class="line">          font-size 19px</span><br><span class="line">          .article-title-link</span><br><span class="line">            -webkit-line-clamp: 2;</span><br><span class="line">        .recent-post-meta</span><br><span class="line">          margin: 0px 20px</span><br><span class="line">          .article-meta-wrap</span><br><span class="line">            font-size 13px</span><br><span class="line">            -webkit-line-clamp: 3;</span><br><span class="line">      .article-content</span><br><span class="line">        position absolute</span><br><span class="line">        height 200px</span><br><span class="line">        width 100%</span><br><span class="line">        background rgba(25,25,25,0.4)</span><br><span class="line">        clip-path polygon(0 130px,0 0,100% 0,100% 130px,50% 100%)</span><br><span class="line">        .article-content-text</span><br><span class="line">          -webkit-line-clamp 3</span><br><span class="line">          font-size 16px</span><br><span class="line">          margin 0px 25px 30px 25px</span><br><span class="line">          &amp;::before</span><br><span class="line">            content &quot;「&quot;</span><br><span class="line">            font-size 20px</span><br><span class="line">          &amp;::after</span><br><span class="line">            content &quot;」&quot;</span><br><span class="line">            font-size 20px</span><br><span class="line">      .recent-post-arrow</span><br><span class="line">        display block</span><br><span class="line">        background var(--text-bg-hover)</span><br><span class="line">        position absolute</span><br><span class="line">        height 10px</span><br><span class="line">        width 20px</span><br><span class="line">        clip-path polygon(0 0,100% 0,50% 100%)</span><br><span class="line">// 三栏布局滑动卡片样式</span><br><span class="line">@media screen and (min-width:1069px)</span><br><span class="line">  .recent-posts</span><br><span class="line">    .recent-post-item</span><br><span class="line">      width 32.3%</span><br><span class="line">      margin 0px 1% 20px 0px</span><br><span class="line">      .recent-post-content</span><br><span class="line">        .recent-post-info</span><br><span class="line">          .article-title</span><br><span class="line">            margin: 0px 5px</span><br><span class="line">            .article-title-link</span><br><span class="line">              -webkit-line-clamp: 1;</span><br><span class="line">          .recent-post-meta</span><br><span class="line">            margin: 0px 5px</span><br><span class="line">            .article-meta-wrap</span><br><span class="line">              -webkit-line-clamp: 2;</span><br><span class="line">// 双栏布局卡片自适应适配</span><br><span class="line">@media screen and (min-width:572px) and (max-width:1068px)</span><br><span class="line">  .recent-posts</span><br><span class="line">    .recent-post-item</span><br><span class="line">      width 47%</span><br><span class="line">      margin 0px 3% 20px 0px</span><br><span class="line">// 单栏布局卡片自适应适配</span><br><span class="line">@media screen and (max-width:572px)</span><br><span class="line">  .recent-posts</span><br><span class="line">    .recent-post-item</span><br><span class="line">      width 100%</span><br></pre></td></tr></table></figure><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><ol><li><p>修改[BlogRoot]\themes\butterfly\source\css_page\homepage.styl,将整文件内容替换为以下代码：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if hexo-config(&#x27;index_card_style&#x27;) == &#x27;slidecard&#x27;</span><br><span class="line">  @import &#x27;./_index_card_style/slidecard&#x27;</span><br><span class="line">else if hexo-config(&#x27;index_card_style&#x27;) == &#x27;multicard&#x27;</span><br><span class="line">  @import &#x27;./_index_card_style/multicard&#x27;</span><br></pre></td></tr></table></figure></li><li><p>然后在主题配置文件[BlogRoot]_config.butterfly.yml里新增配置项，这样我们就可以通过配置项自由切换使用哪款了：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 主页卡片样式</span></span><br><span class="line"><span class="comment"># Docs: https://akilar.top/posts/d6b69c49/</span></span><br><span class="line"><span class="attr">index_card_style:</span> <span class="string">multicard</span> <span class="comment"># slidecard | multicard</span></span><br></pre></td></tr></table></figure></li><li><p>考虑到不管是样式一还是样式二都存在一个布局突变的情况。为了不至于让首页的文章出现空缺，建议将首页生成的文章数量控制为1,2,3的公倍数。修改站点配置文件[BlogRoot]_config.yml。找到以下配置项进行调整，注意这是站点配置文件本就有的配置项，不是新增配置项。建议是调整为12篇。如果你的侧边栏魔改内容特别多，那么建议改成18、24、30。务必确保文章卡片栏比侧栏完全展开要长，这样展示效果最好</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Home page setting</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">12</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span></span><br></pre></td></tr></table></figure></li><li><p>本教程讨论的卡片都是考虑有封面和有描述的。所以需要保证你已经开启了相应的配置，查看主题配置文件[BlogRoot]_config.butterfly.yml,找到配置项开启描述栏，建议选择2模式</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Display the article introduction on homepage</span></span><br><span class="line"><span class="comment"># 1: description</span></span><br><span class="line"><span class="comment"># 2: both (if the description exists, it will show description, or show the auto_excerpt)</span></span><br><span class="line"><span class="comment"># 3: auto_excerpt (default)</span></span><br><span class="line"><span class="comment"># false: do not show the article introduction</span></span><br><span class="line"><span class="attr">index_post_content:</span></span><br><span class="line">  <span class="attr">method:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">500</span> <span class="comment"># if you set method to 2 or 3, the length need to config</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> butterfly </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WinForm项目打包</title>
      <link href="/2023/05/11/WinForm%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/"/>
      <url>/2023/05/11/WinForm%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<p>最近工作中遇到了对于时间戳、Ticks和时间的转换，但是网上对于Ticks转时间的很少，所以就简单的写了一个winform的转换程序。</p><p>写完了当然就是打包成exe文件，方便安装，下面就是我的打包流程，工具为VS2022.</p><p>第一步：下载扩展Microsoft Visual Studio Installer Projects</p><p>菜单中Extension =&gt; Manage Extensions</p><p><img src="/images/software/WinForm项目打包/Microsoft Visual Studio Installer Projects.png" alt="Microsoft Visual Studio Installer Projects"></p><p>注意：安装拓展需要关闭VS2022，会弹出一个安装窗口，确认就行。下载完成进入VS确认一下，看见绿色的勾，代表下载成功</p><p>第二步：右击解决方案 =&gt; 添加 =&gt; 新建项目</p><p><img src="/images/software/WinForm项目打包/新建setup工程.png" alt="新建setup工程"></p><p><img src="/images/software/WinForm项目打包/命名setup工程.png" alt="命名setup工程"></p><p>第三步：项目创建成功之后，添加文件</p><p>1.右击Application Folder（应用程序文件夹） =&gt; Add =&gt; 文件</p><p>2.把你需要打包的项目下 =&gt; bin =&gt; Debug文件夹下的所有文件添加到Application Folder（应用程序文件夹）中（注：全部添加）</p><p><img src="/images/software/WinForm项目打包/Debug文件夹下文件添加到ApplicationFolder.png" alt="Debug文件夹下的所有文件添加到Application Folder"></p><p>第四步：添加卸载程序 （C:\Windows\System32）msiexec.exe</p><p><img src="/images/software/WinForm项目打包/添加卸载程序.png" alt="添加卸载程序"></p><p>2.右击msiexec.exe文件 =&gt; 点击Create Shortcut to msiexec.exe</p><p><img src="/images/software/WinForm项目打包/CreateShortcuttomsiexec.png" alt="CreateShortcuttomsiexec"></p><p>3.点击新建的Setup项目，将ProductCode 属性的值复制 </p><p><img src="/images/software/WinForm项目打包/ProductCode属性的值复制.png" alt="ProductCode属性的值复制 "></p><p>4.点击Shortcut to msiexec.exe =&gt; 将复制的ProductCode 属性值 粘贴在Arguments 属性中，然后在最前面加上 /X （注：/X后有一个空格）</p><p><img src="/images/software/WinForm项目打包/粘贴在Arguments属性中.png" alt="粘贴在Arguments属性中"></p><p>5.最后将卸载快捷方式拖动到User‘s Programs Menu</p><p><img src="/images/software/WinForm项目打包/拖动到User‘sProgramsMenu.png" alt="拖动到User‘sProgramsMenu"></p><p>第五步：<br>1.右击 Application Folder =&gt; Add =&gt;项目输出，然后如下图操作</p><p><img src="/images/software/WinForm项目打包/项目输出.png" alt="项目输出"></p><p>2.得到主输出文件，将主输出文件拖到User’s Desktop（用户的桌面）中(此处如果拖到用户桌面会生成dll文件）</p><p><img src="/images/software/WinForm项目打包/主输出文件.png" alt="主输出文件.png"></p><p>右击您建的setup项目=&gt; 属性</p><p><img src="/images/software/WinForm项目打包/Prerequisites.png" alt="Prerequisites.png"></p><p>选择自己写的项目的依赖</p><p><img src="/images/software/WinForm项目打包/选择自己项目的框架.png" alt="选择自己项目的框架"></p><p>最后生成</p><p><img src="/images/software/WinForm项目打包/最后生成.png" alt="最后生成"></p><p><img src="/images/software/WinForm项目打包/生成的文件.png" alt="生成的文件.png"></p>]]></content>
      
      
      <categories>
          
          <category> C# </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C# </tag>
            
            <tag> winform </tag>
            
            <tag> 打包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>主板知识</title>
      <link href="/2023/05/09/%E4%B8%BB%E6%9D%BF%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/05/09/%E4%B8%BB%E6%9D%BF%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是主板"><a href="#什么是主板" class="headerlink" title="什么是主板"></a>什么是主板</h2><p>主板就是电脑的骨骼，用来承载和连接各种电脑配件的配件。同时，也是处理器的家。</p><p><img src="/images/computer/主板示意图.png" alt="主板示意图.png"></p><p>主板上各种插槽以及功能</p><p>1、主电源，辅助电源接口</p><p>2、处理器插口</p><p>3、内存插槽，一般2到4个插槽或更多;</p><p>5、PCI-E接口：独立显卡插槽;</p><p>6、PCI接口：独立网卡，独立声卡等其它外设接口</p><p>7、硬盘接口：stat接口接stat接口的硬盘或光驱，Ｍ.２接口，接M.2接口的固态硬盘。</p><blockquote><p>选购主板一般都是先选好处理器后才选择主板，因为每一代的处理器对应的主板芯片组都不一样。好马配好鞍，好的处理器，相对应的主板价格也高。</p></blockquote><h2 id="主板分类"><a href="#主板分类" class="headerlink" title="主板分类"></a>主板分类</h2><p>主板多是以芯片组分类的。芯片是有处理能力的集成电路，芯片组就是由多块芯片构成的芯片集。过去，芯片组有两名成员：在主板上方靠近CPU的北桥（也称主桥，North Bridge，NB）芯片和右下方与PCI槽相邻的南桥（South Bridge，SB）芯片：</p><p><img src="/images/computer/主板-南桥北桥.png" style="width: 500px"/> </p><p>NB主要控制CPU与内存之间的数据传输，SB主要控制I/O（Input/Output）接口。随着成本和稳定性的需要，NB的部分功能如内存控制器和核心显卡被集成到CPU中，剩余功能与SB集成在一起，形成看起来只有SB的现在的主板的样貌，称为单桥（PCH）。</p><p>过去，NB肩负着CPU运算的重任，故芯片组均以NB的类型命名，如H81、B85、Z87等。相应地，也把搭载不同芯片组的主板简称为H81主板、B85主板等，便形成了主板的分类。</p><h3 id="芯片组区别"><a href="#芯片组区别" class="headerlink" title="芯片组区别"></a>芯片组区别</h3><ol><li><p>芯片组不同，可承载的硬件规格就不同。一般来说，更高端的芯片组，可承载的其他硬件规格就更高。不同芯片组支持的最大内存频率、M.2接口的支持与否等区别不胜枚举。</p></li><li><p>芯片组不同，可承载的硬件数量就不同。一般来说，更高端的芯片组，可承载的硬件数量就更多。如内存插槽数量、USB接口数、PCI-E总线数、SATA接口数</p></li><li><p>芯片组不同，拓展功能也不同。一般来说，更高端的芯片组，拓展性就更强，可玩性也更强。</p></li></ol><h2 id="如何选主板"><a href="#如何选主板" class="headerlink" title="如何选主板"></a>如何选主板</h2><ul><li>板型 </li></ul><p>常见的板型由大到小分别为XL-ATX，ATX，M-ATX，ITX。</p><p>这里的命名是比较混乱的，尤其在电商购买时往往分类不标准：</p><p>XL-ATX一般也记为E-ATX；</p><p>ATX也称Standard-ATX，是标准板型；</p><p>M-ATX即Micro-ATX，其实包括正宗的M-ATX和μ-ATX：M-ATX为正方形；μ-ATX为宽度比M-ATX小的长方形，尺寸比M-ATX更小；</p><p>ITX又称Mini-ITX；</p><p><img src="/images/computer/主板板型.png" alt="主板板型.png"></p><p>尺寸小的主板，插槽固然也少。其中M-ATX一般瞄准低端市场，用料也会比较低端，价格上一般比较便宜。ITX用于组装小巧精致的Mini台式机，这类台式机更多是为了美观和给发烧友装13用的，所以某些主板厂商机（jiao）智（hua）地瞄准这些高端用户推出用料精良的高端ITX主板，所以某些产品比ATX主板还贵。</p><ul><li>I/O接口</li></ul><p>不同芯片组可支持的I/O接口的类型和数量是不同的，另外，I/O接口也由主板厂商的设计决定</p><ul><li>供电模块</li></ul><p>电力从电源传输到主板，主板进行稳流和调制后传输给各个硬件，供电模块的作用便是为硬件提供稳定、纯净的电流。供电模块的构成比较复杂，普通DIYer一般关注供电相数、电子元件的质量等。其中电子元件的质量取决于生产元件的厂家，主板厂商一般会把所用的元件品牌型号列出，这里不予讨论，仅讨论供电相数。</p><p>供电相数：一相供电由一个电感，一个电容和一对MOS管组成，用于滤波、稳流。随着CPU性能的增强，对供电的要求越来越高，主板的供电相数也越做越多。</p><p>供电相数多，自然可以提供更稳定的电流。但过多也是有弊端的：首先，电子元件多了，价格自然也贵。其次，电子元件的增加使电路变复杂，后果便是主板设计更加困难，小厂商设计跟不上却又想增加供电相数，结果就是供电设计不合理，容易坏；采用更优秀的设计，设计成本又上来了，只能从用户中赚回来，又变贵。供电模块多，发热问题也很严重，如果设计时不加装供电模块的散热片，发热过大容易导致元件烧毁；加装散热片又会增加成本，还是一个字：贵。</p><ul><li>内存插槽</li></ul><p>内存插槽的数量，两根还是四根</p><ul><li>SATA接口</li></ul><p><img src="/images/computer/主板-sata接口.png" alt="主板-sata接口.png"></p><p>目前SATA接口分为2.0和3.0版本，后者传输速度较高。不同主板提供的SATA接口种类和数量可能不同。</p><ul><li>PCH设计</li></ul><p>某些主板总是比其他主板便宜，其实可能是PCH设计偷工减料。这里主要是指PCH散热设计。</p><ul><li>PCI-E接口</li></ul><p>对于普通用户来说，PCI-E接口的数量和种类并不太重要，能装个独显打打撸、插个无线网卡就行了。但对于高端用户来说，多卡SLI或CF、视频采集卡、无线网卡等一起上的时候，PCI-E插槽还是十分重要的。</p><ul><li>其他芯片</li></ul><p>声卡、网卡</p><h2 id="简单粗暴无脑选购主板大法"><a href="#简单粗暴无脑选购主板大法" class="headerlink" title="简单粗暴无脑选购主板大法"></a>简单粗暴无脑选购主板大法</h2><p>方法论与世界观：主板越大越好，外观越酷炫越好，看起来很装13，恩，就选它！</p><p>第一步：选择芯片组。玩超频选Z系，不玩超频选B系；</p><p>第二步：选择价位。</p><p>第三步：比较同价位的产品。300附近看评论；500附近看参数；1000附近看附加功能；1500以上看够不够炫酷、灯光够不够多、散热片够不够夸张、颜色够不够装13。</p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> mainboard </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>固态硬盘的选择</title>
      <link href="/2023/04/28/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E7%9A%84%E9%80%89%E6%8B%A9/"/>
      <url>/2023/04/28/%E5%9B%BA%E6%80%81%E7%A1%AC%E7%9B%98%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h2><p>现在 M.2 接口就逐渐成为固态硬盘接口的主流</p><p>SATA 接口的固态硬盘大部分被设计成和机械硬盘通用尺寸和接口，拆下来之后你就会发现，其实真正储存和电路部分只有一小块，剩下的都是空的</p><p>SATA 接口和走 SATA/AHCI 协议的接口速度上限被限定在 700MB/S 左右，所以新的固态硬盘都会选择使用 M.2 接口或者直接插 PCIe 槽。</p><p>购买 NVMe、M.2 接口 固态硬盘或者把它们装到电脑主板上时，通常都会看到类似于 22XX 4 个数字的参数，这个就表示固态硬盘的尺寸。</p><p>22=22mm，也就是固态硬盘宽度是 2.2 厘米的意思，后面两个数字就是固态硬盘的长度，通常会有 20，42，60，80 等常见长度，以毫米为单位。我们购买的时候一定要先看看自己设备上的 M.2 接口预留出了多少空间，免得太长放不进去。</p><h2 id="接口、协议"><a href="#接口、协议" class="headerlink" title="接口、协议"></a>接口、协议</h2><p>民用储存设备常见到的总线有 SATA 总线、PCIe 总线和企业级 SAS 总线（如果你用一些服务器主板的话，可能会有）</p><p>SATA 总线一般是给机械硬盘使用，而且速度上限比较低，而 SAS 总线又是企业级使用比较多，那么低速的固态硬盘走 SATA 总线，现代的 NVMe 固态硬盘一般都是走 PCIe 总线了。</p><p>和简单的总线协议不同，固态硬盘接口方面可就复杂多了。最基础的就是我们常见的 SATA 接口，还有为了笔记本等便携式设备引申出来的 mSATA 接口，还有固态硬盘专享的 M.2（NGFF） 接口，SATA Express（SATAe） 接口，PCIe 接口，甚至还有不常见的走 SAS 总线的 SAS 接口与 U.2，AIC 接口等等</p><h2 id="M-2（NGFF）-PCIe-接口固态硬盘"><a href="#M-2（NGFF）-PCIe-接口固态硬盘" class="headerlink" title="M.2（NGFF） /PCIe 接口固态硬盘"></a>M.2（NGFF） /PCIe 接口固态硬盘</h2><p>M.2 接口： 专门用于固态硬盘，并且可以与速度最快的 PCIe 总线交流的接口</p><p>作为现在和未来的主流接口，自然有向后兼容，既可以使用 SATA 协议也可以使用 NVMe 协议，由于支持协议众多并且接口复杂，M.2 接口通过接口上的缺口来确定协议类型，由于不同缺口像钥匙那样，所以叫做 KEY，M.2 接口有从 ABCDEFGHJKLM 这么多种 KEY，KEY 对不上是插不进去对应接口的</p><p>我们日常只能看到两种：M KEY 和 B KEY。</p><p>既然 M.2 接口的高速固态硬盘使用的是 NVMe 协议走 PCIe 总线，有些厂商干脆就把固态硬盘做成 PCIe 接口，插到 PCIe 插槽插使用。这就是 PCIe 固态硬盘，用的一般也是 NVMe 协议。</p><h3 id="电脑主板简单示意图"><a href="#电脑主板简单示意图" class="headerlink" title="电脑主板简单示意图"></a>电脑主板简单示意图</h3><p><img src="/images/computer/电脑简单示意图.png" alt="电脑主板简单示意图" style="width: 50%;"/></p>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> solid state drives(SSD) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>内存的选择</title>
      <link href="/2023/04/28/%E5%86%85%E5%AD%98%E7%9A%84%E9%80%89%E6%8B%A9/"/>
      <url>/2023/04/28/%E5%86%85%E5%AD%98%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="推荐品牌"><a href="#推荐品牌" class="headerlink" title="推荐品牌"></a>推荐品牌</h2><p>金士頓(Kingston)、威刚(ADATA)、三星（SAMSUNG）、芝奇(G.SKILL)、海盗船(Corsair)、十铨(Team)、镁光(Micron Crucial)、科赋(KLEVV)、阿斯加特（Asgard）、光威（gloway）、影驰、长鑫颗粒等</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p>内存分ROM(只读存储器)和RAM(随机存储器、内存条也是RAM)两部分，RAM可以理解为主存，ROM只是很小一部分，比如记录BIOS信息的ROM。</p><p>ROM是在主板上的电池旁边的一块写着BIOS的芯片。</p><p>在个人电脑中，SRAM 常常以芯片的形式出现，被嵌入到主板、显卡或其他扩展卡中。</p><p>内存条是DRAM。</p><h2 id="版本"><a href="#版本" class="headerlink" title="版本"></a>版本</h2><p>所谓几代只得内存条的类型，名字叫做Double Data Rate双倍速率同步动态随机存储器。简称为DDR几 目前最高是DDR5 也就是五代内存。</p><p>目前主流的就是第四代DDR4，不同代的内存条，接口是不一样的，不同世代内存条和互不兼容。国际惯例DDR4技术优于DDR3和DDR2，同时DDR3和DDR2已经落伍淘汰，DDR4是目前的存量市场主流，DDR5也已经全面上市了，频率更高，目前正处于第四代和第五代更替的时间节点，DDR5未来1到3年会成为主流。另外笔记本内存的外形要比台式机的内存短一些，来配合笔记本电脑更小的空间。</p><p>从性能上来讲，代数越高 一般频率也越高，性能自然也越高。</p><h2 id="内存容量"><a href="#内存容量" class="headerlink" title="内存容量"></a>内存容量</h2><p>16G对于绝大多数人都是足够的，除非是要吃内存的专业软件需要才考虑选择32G及以上的内存大小，购买时注意购买2根组成双通道，同等条件下双通道效能大于单通道。</p><h3 id="内存双通道相关知识"><a href="#内存双通道相关知识" class="headerlink" title="内存双通道相关知识"></a>内存双通道相关知识</h3><p>一般来讲，DDR4内存都要组内存双通道，DDR4内存组双通道可以内存带宽，从而提升性能，两根8G的DDR4内存的性能大于一跟16G的DDR4内存。</p><p>内存带宽 = 内存核心频率 X 内存总线位宽 X 倍增系数</p><p>其中内存总线位宽就是要说的内存双通道。当你只有一根内存的时候，数据都保存在这根内存条中，cpu也只能和这一根内存做数据交互。当你有两根时候，组成双通道，此时，你运行的数据被拆分了两部分分别在两根内存条中，cpu可以同时访问两根内存条。</p><p>但DDR5单条就是双通道了。插入两条8G的DDR5内存条，与一条16G的DDR5内存条的性能差距很小，几乎可以忽略不计。</p><p>但如果追求极致性能，两条DDR5内存条的带宽也会翻倍。不过由于DDR5单条的带宽已经很高，再拓展一倍，也不会有明显使用体验上提升。就好比原本是四车道，拓展到八车道后堵车减少，性能提升明显。但如果本来就是八车道，再拓展到十六车道也不会有太大改变。</p><h2 id="内存频率"><a href="#内存频率" class="headerlink" title="内存频率"></a>内存频率</h2><p>内存都会标注频率，2666MHz、3200MHz、3600MHz、4800MHz、5600MHz、6000MHz等，根据需求选。（注：购买高频内存需要进bios开启xmp，不然D4默频2666MHz运行，D5默认4800MHz运行）</p><p>注意看CPU和主板是否支持才行。</p><h3 id="内存颗粒"><a href="#内存颗粒" class="headerlink" title="内存颗粒"></a>内存颗粒</h3><p>内存颗粒极大的影响着内存频率超频体验</p><p><strong>内存颗粒就是DRAM芯片</strong>，内存颗粒就是内存用来存储数据的中转仓库，不过它不像硬盘，它属于易失性存储（临时存储），只要断电之后，存放在内存中的所有的数据就会消失。</p><h2 id="内存的时序"><a href="#内存的时序" class="headerlink" title="内存的时序"></a>内存的时序</h2><p>内存的时序一般就是指延迟，所以越低越好，一般用户无需太关心。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>选择销量好的主流品牌，一般主流品牌内存产品都提供终身质保，主流品牌更可靠，且兼容性相对更好。</li><li>一般用户选购内存，只需看品牌、世代、容量、频率即可，超频玩家可以深入研究内存颗粒、时序等。</li></ol><h3 id="内存理论参考"><a href="#内存理论参考" class="headerlink" title="内存理论参考"></a>内存理论参考</h3><ol><li><a href="https://www.cnblogs.com/guanghe/p/12517637.html">内存基础知识</a> 讲的比较清晰</li></ol>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> memory </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机械硬盘的选择</title>
      <link href="/2023/04/27/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E7%9A%84%E9%80%89%E6%8B%A9/"/>
      <url>/2023/04/27/%E6%9C%BA%E6%A2%B0%E7%A1%AC%E7%9B%98%E7%9A%84%E9%80%89%E6%8B%A9/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是机械硬盘？"><a href="#什么是机械硬盘？" class="headerlink" title="什么是机械硬盘？"></a>什么是机械硬盘？</h2><p>机械硬盘简称HDD指的就是传统普通硬盘，主要有：盘片，磁头，盘片转轴及控制电机，磁头控制器，数据转换器，接口，缓存等几个部分组成。工作时靠磁头悬浮在高速旋转的碟片上进行读写数据。机械硬盘输入集精密机械、微电子电路、电磁转换为一体的存储设备。</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p>容量：机械硬盘可提供巨大存储空间，2TB在固态硬盘中堪称大容量，在机械硬盘中几乎只是入门</p><p>容量单价：机械硬盘容量单价远低于固态硬盘，同容量机械硬盘价格远低于固态硬盘（2TB及以上）</p><p>转速：机械硬盘工作时靠磁头悬浮在高速旋转的碟片上进行读写数据，而碟片依靠主轴马达来转动。一般硬盘转速5400-7200。</p><p>缓存：硬盘与外部交换数据的临时场所。硬盘读/写数据时，缓存就像一个中转仓库一样，不断地写入数据、清空再写入数据。目前大多数硬盘缓存有64MB、128M、256M。这个参数在以前话我们说越大越好，现在似乎不是太重要，现在这个缓存增大，是由于硬盘容量的增大，硬盘厂商采用了叠瓦的形式来写入数据。需要更多的临时交替数据，不增大缓存不行。</p><p>接口：最主流的接口就是SATA接口了，另外一个就是SAS接口。现在更强的是NVME协议。</p><blockquote><p>SATA是“Serial ATA”的缩写，通俗的说就是串行数据传输接口，是硬盘如今主流的接口，SATA接口仅用四支针脚就能完成所有的工作，分别用于连接电缆、连接地线、发送数据和接收数据，同时这样的架构还能降低系统能耗和减小系统复杂性。</p><p>现在一般用的接口是SATA 3.0接口，相比1.0和2.0，它有更快的传输上限，使用SATA 3.0接口传输速度可以达到6Gbps(750MB/s)，不过这只是理论速度。</p><p>事实上SATA接口发送信息的速度为600MB/s，受制于系统各部件的影响，实际速度会更低一些，而且不同环境差异会很大。 </p><p>所以在网上购买硬盘时总会看见6Gbps这个数值，这个就是硬盘的接口速率，不过单个机械硬盘是达不到这个速度的，所以才会有固态或者磁盘阵列。</p></blockquote><div class="table-container"><table><thead><tr><th>版本</th><th>带宽</th><th>实际速度</th></tr></thead><tbody><tr><td>SATA1.0</td><td>1.5Gb/s</td><td>150MB/s</td></tr><tr><td>SATA2.0</td><td>3Gb/s</td><td>300MB/s</td></tr><tr><td>SATA3.0</td><td>6Gb/s</td><td>600MB/s</td></tr></tbody></table></div><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p>笔记本硬盘（2.5寸）和台式机硬盘（3.5寸）</p><p>机械硬盘可按照尺寸分为笔记本硬盘和台式机硬盘两类，前者磁碟直径为2.5英寸、厚度一般为7mm或9mm，后者磁碟直径为3.5英寸、厚度一般为26mm，于是同转速下台式机硬盘中磁头扫过的磁区更多，台式机的连续读写速度因此更快。</p><p>笔记本硬盘（2.5寸）体积小巧、转速较低（常见5400转），可以用于笔记本和itx机箱，它们相比台式机硬盘（3.5寸）噪音一般更小、发热更少，但是市售1TB及以上的硬盘（包括移动硬盘）均为叠瓦盘。</p><p>台式机硬盘（3.5寸）体型壮硕如板砖，转速高（常见7200转）、噪音大、发热稍大一点，多块硬盘堆积使用需要注意散热。</p><p>CMR和SMR区别：因为CMR和SMR的性能差距大，CMR相对于SMR来说，是更好的性能卖点，厂家会在显眼的地方说明使用的是CMR。对于SMR，不是好技术，厂家通常决口不谈，如果你翻遍了硬盘的介绍页面，也没有看到出现CMR的字样，那么这个硬盘99%的可能性，是使用SMR技术的叠瓦盘。</p><h3 id="品牌"><a href="#品牌" class="headerlink" title="品牌"></a>品牌</h3><p>机械硬盘常见的品牌有西部数据(WD)、希捷（ST）等。</p><p>1、西数有绿盘、蓝盘、紫盘、红盘、黑盘、企业盘几个系列</p><ul><li>绿盘：价格便宜，噪音小、发热低,性能一般，适用于家用办公。不过绿盘很少见了，一般都被蓝盘代替了。</li><li>蓝盘：价格适中，定位民用，一般用于家用、办公电脑、最好不要7*24小时运转。</li><li>紫盘：价格适中，能够减少在安全系统使用中发生的像素错误和视频中断次数，兼容各种安全系统。主要用于监控安防。</li><li>黑盘：价格贵，定位高端，其性能强悍。一般用于企业、网吧等要求吞吐量大的服务器上。</li><li>红盘：容错率高，兼容性好，质量和蓝盘、绿盘差不多。一般用于NAS存储，弄几块红盘做raid阵列来存储公司或企业资料。</li><li>企业盘:性能和黑盘相比速度差不多，稳定性要好于黑盘。一般用于企业服务器。</li></ul><p>2、希捷(ST)有酷鱼、酷鹰、酷狼、银河企业等系列。</p><ul><li>酷鱼系列：速度还行，用于日常办公。</li><li>酷鹰系列：希捷通过与海康威视、大华等安防企业进行了技术合作，研发了这个系列主要用于监控安防领域。</li><li>酷狼系列：性能和响应时间好于普通硬盘，稳定性好，耐用，可扩展强。用于NAS存储。</li><li>银河企业系列:稳定性好，速度快，一般用于企业公司服务器或网吧服务器。</li></ul><h2 id="硬盘阵列"><a href="#硬盘阵列" class="headerlink" title="硬盘阵列"></a>硬盘阵列</h2><p>硬盘组磁盘阵列后除raid0阵列外往往容量有所损耗：</p><ul><li>Raid0：硬盘总数*每块硬盘容量</li><li>Raid1：镜像备份模式，硬盘容量减半</li><li>Raid5：1块数据校验盘，硬盘容量为（硬盘总数-1）*每块硬盘容量</li><li>Raid6： 2块数据校验盘，硬盘容量为（硬盘总数-2）*每块硬盘容量</li><li>Raid10：0.5<em>硬盘总数</em>每块硬盘容量</li></ul>]]></content>
      
      
      <categories>
          
          <category> Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> computer </tag>
            
            <tag> hard disk drive(HHD) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux查看系统资源的命令</title>
      <link href="/2023/04/20/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9A%84%E5%91%BD%E4%BB%A4/"/>
      <url>/2023/04/20/Linux%E6%9F%A5%E7%9C%8B%E7%B3%BB%E7%BB%9F%E8%B5%84%E6%BA%90%E7%9A%84%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-查看系统资源的命令"><a href="#Linux-查看系统资源的命令" class="headerlink" title="Linux 查看系统资源的命令"></a>Linux 查看系统资源的命令</h2><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><h4 id="top命令"><a href="#top命令" class="headerlink" title="top命令"></a>top命令</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">命令 参数</span><br><span class="line">d：指定更新的间隔，以秒计算。</span><br><span class="line">q：没有任何延迟的更新。如果使用者有超级用户，则top命令将会以最高的优先序执行。</span><br><span class="line">c：显示进程完整的路径与名称。</span><br><span class="line">S：累积模式，会将己完成或消失的子行程的CPU时间累积起来。</span><br><span class="line">s：安全模式。</span><br><span class="line">i：不显示任何闲置(Idle)或无用(Zombie)的行程。</span><br><span class="line">n：显示更新的次数，完成后将会退出top。</span><br></pre></td></tr></table></figure><p>显示说明：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">top - 05:32:00 up 16:01,  3 users,  load average: 0.00, 0.00, 0.00</span><br><span class="line">Tasks: 219 total,   1 running, 218 sleeping,   0 stopped,   0 zombie</span><br><span class="line">%Cpu(s):  0.2 us,  0.1 sy,  0.0 ni, 99.8 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st    #### cpu信息</span><br><span class="line">MiB Mem :   3931.3 total,   2960.7 free,    245.0 used,    725.5 buff/cache        #### 内存信息</span><br><span class="line">MiB Swap:   3931.0 total,   3931.0 free,      0.0 used.   3453.8 avail Mem         #### 硬盘上交换分区</span><br><span class="line"></span><br><span class="line">PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                                               </span><br><span class="line">26727 cqd       20   0    9412   4088   3256 R   0.7   0.1   0:00.13 top                                                                                                                                                   </span><br><span class="line">784 root      20   0  309464   7888   6536 S   0.3   0.2   1:23.86 vmtoolsd                                                                                                                                              </span><br><span class="line">25990 root      20   0       0      0      0 I   0.3   0.0   0:00.96 kworker/3:0-events                                                                                                                                    </span><br><span class="line">1 root      20   0  169428  12844   8480 S   0.0   0.3   0:07.67 systemd                                                                                                                                               </span><br><span class="line">2 root      20   0       0      0      0 S   0.0   0.0   0:00.03 kthreadd</span><br><span class="line">----------------------------------------------------------------------------------------</span><br><span class="line">PID（Process ID）：进程标示号。</span><br><span class="line">USER：进程所有者的用户名。</span><br><span class="line">PR：进程的优先级别。</span><br><span class="line">NI：进程的优先级别数值。</span><br><span class="line">VIRT：进程占用的虚拟内存值。</span><br><span class="line">RES：进程占用的物理内存值。</span><br><span class="line">SHR：进程使用的共享内存值。</span><br><span class="line">S：进程的状态，其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数。</span><br><span class="line">%CPU：该进程占用的CPU使用率。</span><br><span class="line">%MEM：该进程占用的物理内存和总内存的百分比。</span><br><span class="line">TIME＋：该进程启动后占用的总的CPU时间。</span><br><span class="line">Command：进程启动的启动命令名称，如果这一行显示不下，进程会有一个完整的命令行。</span><br></pre></td></tr></table></figure></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">top命令使用过程中，还可以使用一些交互的命令来完成其它参数的功能。这些命令是通过快捷键启动的。</span><br><span class="line">&lt;空格&gt;：立刻刷新。</span><br><span class="line">P：根据CPU使用大小进行排序。</span><br><span class="line">T：根据时间、累计时间排序。</span><br><span class="line">q：退出top命令。</span><br><span class="line">m：切换显示内存信息。</span><br><span class="line">t：切换显示进程和CPU状态信息。</span><br><span class="line">c：切换显示命令名称和完整命令行。</span><br><span class="line">M：根据使用内存大小进行排序。</span><br><span class="line">W：将当前设置写入~/.toprc文件中。这是写top配置文件的推荐方法。</span><br></pre></td></tr></table></figure><h4 id="htop-指令-top升级版"><a href="#htop-指令-top升级版" class="headerlink" title="htop 指令(top升级版)"></a>htop 指令(top升级版)</h4><p>命令格式：htop<br>用途：详细分析CPU和内存使用情况。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install htop</span><br></pre></td></tr></table></figure><br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">第一区域：CPU、内存、Swap的使用情况；</span><br><span class="line">第二区域：任务、线程、平均负载及系统运行时间的信息。平均负载部分提供了三个数字，这仅仅表示的是过去的5分钟、10分钟和15分钟系统的平均负载而已，在单核的系统中平均负载为1表示的是百分之百的 CPU 利用率。最后，运行时间 （uptime）标示的数字是从系统启动起到当前的运行总时间。</span><br><span class="line">第三区域：当前系统中的所有进程。各列说明：</span><br><span class="line">    PID：进程标志号，是非零正整数</span><br><span class="line">    USER：进程所有者的用户名</span><br><span class="line">    PR：进程的优先级别</span><br><span class="line">    NI：进程的优先级别数值</span><br><span class="line">    VIRT：进程占用的虚拟内存值</span><br><span class="line">    RES：进程占用的物理内存值</span><br><span class="line">    SHR：进程使用的共享内存值</span><br><span class="line">    S：进程的状态，其中S表示休眠，R表示正在运行，Z表示僵死状态，N表示该进程优先值是负数</span><br><span class="line">    %CPU：该进程占用的CPU使用率</span><br><span class="line">    %MEM：该进程占用的物理内存和总内存的百分比</span><br><span class="line">    TIME+：该进程启动后占用的总的CPU时间</span><br><span class="line">    COMMAND：进程启动的启动命令名称</span><br><span class="line">第四区域：当前界面中F1-F10功能键中定义的快捷功能。即 底部菜单栏。</span><br></pre></td></tr></table></figure></p><h4 id="TIP："><a href="#TIP：" class="headerlink" title="TIP："></a>TIP：</h4><p>1）当物理内存快被耗尽时，系统并没有崩溃，而是拿 swap 做临时内存，当两者都耗尽，系统 OutofMemory</p><p>2）物理内存达到峰值，系统中一些不常用的进程内存占用被提到 swap 区</p><p>3）当 Men 区的资源进行释放时，被挪到 swap 的内存并不会全部回来，随着系统或者程序的唤醒才会慢慢回到 men 区</p><p>4）swap 是内存不够时，磁盘虚拟出来的内存，磁盘主要是 I/O 级别的操作，并不是系统内核级别的操作，处理速度跟 mem 区不是一个等级</p><h4 id="vmstat-命令"><a href="#vmstat-命令" class="headerlink" title="vmstat 命令"></a>vmstat 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">命令参数：</span><br><span class="line">vmstat [循环等待时间] [采集次数]例如：vmstat 2 3</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cqd@cqd:~$ vmstat</span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line">r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy <span class="built_in">id</span> wa st</span><br><span class="line">0  0      0 3030696 122816 620584    0    0     2     4   26   36  0  0 100  0  0</span><br></pre></td></tr></table></figure><p>命令显示：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">r 表示运行队列(就是说多少个进程真的分配到CPU)，我测试的服务器目前CPU比较空闲，没什么程序在跑，当这个值超过了CPU数目，就会出现CPU瓶颈了。这个也和top的负载有关系，一般负载超过了3就比较高，超过了5就高，超过了10就不正常了，服务器的状态很危险。top的负载类似每秒的运行队列。如果运行队列过大，表示你的CPU很繁忙，一般会造成CPU使用率很高。</span><br><span class="line">b 表示阻塞的进程,这个不多说，进程阻塞，大家懂的。</span><br><span class="line">swpd 虚拟内存已使用的大小，如果大于0，表示你的机器物理内存不足了，如果不是程序内存泄露的原因，那么你该升级内存了或者把耗内存的任务迁移到其他机器。</span><br><span class="line">free   空闲的物理内存的大小，我的机器内存总共8G，剩余3415M。</span><br><span class="line">buff   Linux/Unix系统是用来存储，目录里面有什么内容，权限等的缓存，我本机大概占用300多M</span><br><span class="line">cache cache直接用来记忆我们打开的文件,给文件做缓冲，我本机大概占用300多M(这里是Linux/Unix的聪明之处，把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)</span><br><span class="line">si  每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露了，要查找耗内存进程解决掉。我的机器内存充裕，一切正常。</span><br><span class="line">so  每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。</span><br><span class="line">bi  块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte，我本机上没什么IO操作，所以一直是0，但是我曾在处理拷贝大量数据(2-3T)的机器上看过可以达到140000/s，磁盘写入速度差不多140M每秒</span><br><span class="line">bo 块设备每秒发送的块数量，例如我们读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。</span><br><span class="line">in 每秒CPU的中断次数，包括时间中断</span><br><span class="line">cs 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用，是不可取的。</span><br><span class="line">us 用户CPU时间，我曾经在一个做加密解密很频繁的服务器上，可以看到us接近100,r运行队列达到80(机器在做压力测试，性能表现不佳)。</span><br><span class="line">sy 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。</span><br><span class="line">id  空闲 CPU时间，一般来说，id + us + sy = 100,一般我认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。</span><br><span class="line">wt 等待IO CPU时间。</span><br></pre></td></tr></table></figure></p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><h4 id="free-命令，-top-命令"><a href="#free-命令，-top-命令" class="headerlink" title="free 命令， top 命令"></a>free 命令， top 命令</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">free 命令参数</span><br><span class="line">－b －k －m：分别以字节（KB、MB）为单位显示内存使用情况。</span><br><span class="line">－s delay：显示每隔多少秒数来显示一次内存使用情况。</span><br><span class="line">－t：显示内存总和列。</span><br><span class="line">－o：不显示缓冲区调节列。</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cqd@cqd:~$ free -m</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           3931         244        2960           1         726        3454</span><br><span class="line">Swap:          3930           0        3930</span><br><span class="line">cqd@cqd:~$ free</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:        4025604      250280     3031352        1240      743972     3537284</span><br><span class="line">Swap:       4025340           0     4025340</span><br></pre></td></tr></table></figure><h3 id="磁盘"><a href="#磁盘" class="headerlink" title="磁盘"></a>磁盘</h3><h4 id="df-h-命令"><a href="#df-h-命令" class="headerlink" title="df -h 命令"></a>df -h 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cqd@cqd:~$ <span class="built_in">df</span> -h</span><br><span class="line">Filesystem                         Size  Used Avail Use% Mounted on</span><br><span class="line">udev                               1.9G     0  1.9G   0% /dev</span><br><span class="line">tmpfs                              394M  1.3M  392M   1% /run</span><br><span class="line">/dev/mapper/ubuntu--vg-ubuntu--lv   24G  6.2G   17G  28% /</span><br><span class="line">tmpfs                              2.0G     0  2.0G   0% /dev/shm</span><br><span class="line">tmpfs                              5.0M     0  5.0M   0% /run/lock</span><br></pre></td></tr></table></figure><h3 id="查看其他系统资源命令"><a href="#查看其他系统资源命令" class="headerlink" title="查看其他系统资源命令"></a>查看其他系统资源命令</h3><h4 id="uptime-命令"><a href="#uptime-命令" class="headerlink" title="uptime 命令"></a>uptime 命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cqd@cqd:~$ <span class="built_in">uptime</span></span><br><span class="line">05:52:37 up 16:22,  3 <span class="built_in">users</span>,  load average: 0.00, 0.00, 0.00</span><br><span class="line"><span class="comment">#当前服务器时间：    05:52:37</span></span><br><span class="line"><span class="comment">#当前服务器运行时长  16:22 min</span></span><br><span class="line"><span class="comment">#当前用户数          3 users</span></span><br><span class="line"><span class="comment">#当前的负载均衡      load average  0.00, 0.00, 0.00，分别取1min,5min,15min的均值</span></span><br></pre></td></tr></table></figure><p>什么样的Load值得警惕（<strong>单核</strong>）？</p><p>Load &lt; 0.7时：系统很闲，马路上没什么车，要考虑多部署一些服务</p><p>0.7 &lt; Load &lt; 1时：系统状态不错，马路可以轻松应对</p><p>Load == 1时：系统马上要处理不多来了，赶紧找一下原因</p><p>Load &gt; 5时：马路已经非常繁忙了，进入马路的每辆汽车都要无法很快的运行</p><p>如果有两个CPU，则表示有两条马路，此时即使Load大于1也不代表有汽车在等待：</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>su和sudo的小知识</title>
      <link href="/2023/04/19/su%E5%92%8Csudo%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/"/>
      <url>/2023/04/19/su%E5%92%8Csudo%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h2 id="su命令"><a href="#su命令" class="headerlink" title="su命令"></a>su命令</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su cqd</span><br></pre></td></tr></table></figure><p>表示切换到cqd用户模式，需要输入该用户密码。如果是root用户使用该命令，则不需要输入密码，因为root权限高。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su</span><br></pre></td></tr></table></figure><br>只输入su后面不加账户名称时，系统默认切换到root账户，需要知道root的密码。没有时间限制。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su -</span><br></pre></td></tr></table></figure><br>表示申请切换root用户，需要申请root用户密码。</p><blockquote><p>有些Linux发行版，例如ubuntu，默认没有设置root用户的密码，所以需要我们先使用sudo passwd root设置root用户密码。</p></blockquote><h3 id="su和su-区别"><a href="#su和su-区别" class="headerlink" title="su和su -区别"></a>su和su -区别</h3><ul><li><p>[su]只是切换了root身份，但Shell环境仍然是普通用户的Shell；</p></li><li><p>[su -]连用户和Shell环境一起切换成root身份了。只有切换了Shell环境才不会出现PATH环境变量错误，报command not found的错误。</p></li><li><p>[su]切换成root用户以后，pwd一下，发现工作目录仍然是普通用户的工作目录；而用[su -]命令切换以后，工作目录变成root的工作目录了。</p></li><li><p>用echo $PATH命令看一下su和su - 后的环境变量已经变了。 </p></li></ul><h3 id="实际例子："><a href="#实际例子：" class="headerlink" title="实际例子："></a>实际例子：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">cqd@cqd:~$ su -</span><br><span class="line">Password: </span><br><span class="line">root@cqd:~<span class="comment"># pwd</span></span><br><span class="line">/root</span><br><span class="line">root@cqd:~<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br><span class="line">root@cqd:~<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">logout</span></span><br><span class="line">cqd@cqd:~$ <span class="built_in">pwd</span></span><br><span class="line">/home/cqd</span><br><span class="line">cqd@cqd:~$ su</span><br><span class="line">Password: </span><br><span class="line">root@cqd:/home/cqd<span class="comment"># pwd</span></span><br><span class="line">/home/cqd</span><br><span class="line">root@cqd:/home/cqd<span class="comment"># echo $PATH</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin</span><br><span class="line">root@cqd:/home/cqd<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h2><p>sudo是linux系统管理指令，是允许系统管理员让普通用户执行一些或者全部的root命令的一个工具，如halt，reboot，su等等。<br>这样不仅减少了root用户的登录和管理时间，同样也提高了安全性。</p><p>是一种权限管理机制，管理员可以授权于一些普通用户去执行一些 root 执行的操作，而不需要知道 root 的密码。</p><h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ol><li><p>sudo能够限制用户只在某台主机上运行某些命令。</p></li><li><p>sudo提供了丰富的日志，详细地记录了每个用户干了什么。它能够将日志传到中心主机或者日志服务器。<strong>默认的安全策略记录在 /etc/sudoers 文件中</strong>，属性必须为0440</p></li><li><p>sudo的配置文件是sudoers文件，它允许系统管理员集中的管理用户的使用权限和使用的主机。</p><blockquote><p>当用户执行sudo时，系统会主动寻找/etc/sudoers文件，判断该用户是否有执行sudo的权限</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@cqd:/home/cqd<span class="comment"># ll /etc/sudoers</span></span><br><span class="line">-r--r----- 1 root root 755 Feb  3  2020 /etc/sudoers </span><br></pre></td></tr></table></figure></blockquote><p> sudoers主要内容如下：</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">格式：授权用户/组 主机  =[(切换到哪些用户或组)] [是否需要输入密码验证] 命令1,命令2,...</span><br><span class="line"></span><br><span class="line">字段1：</span><br><span class="line">不以%号开头的表示&quot;将要授权的用户&quot; root</span><br><span class="line">以%号开头的表示&quot;将要授权的组&quot; %wheel</span><br><span class="line"></span><br><span class="line">字段2:表示允许登录的主机</span><br><span class="line">ALL表示所有; 如果该字段不为ALL,表示授权用户只能在某些机器上登录本服务器来执行sudo命令</span><br><span class="line">eg:jack mycomputer=/usr/sbin/reboot,/usr/sbin/shutdown</span><br><span class="line">表示: 普通用户jack在主机(或主机组)mycomputer上, 可以通过sudo执行reboot和shutdown两个命令</span><br><span class="line"></span><br><span class="line">字段3:</span><br><span class="line">如果省略, 相当于(root:root)，表示可以通过sudo提权到root; 如果为(ALL)或者(ALL:ALL), 表示能够提权到(任意用户:任意用户组)。</span><br><span class="line">注意：如果没省略,必须使用( )双括号包含起来</span><br><span class="line"></span><br><span class="line">字段4：</span><br><span class="line">可能取值是NOPASSWD:。请注意NOPASSWD后面带有冒号:。表示执行sudo时可以不需要输入密码</span><br><span class="line">eg:lucy ALL=(ALL) NOPASSWD: /bin/useradd</span><br><span class="line">表示: 普通用户lucy可以在任何主机上, 通过sudo执行/bin/useradd命令, 并且不需要输入密码</span><br><span class="line"></span><br><span class="line">字段5:授权给用户的操作</span><br><span class="line">逗号分开一系列命令或者ALL表示允许所有操作</span><br></pre></td></tr></table></figure><p> 例子：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">15  <span class="comment"># User privilege specification</span></span><br><span class="line">16  root    ALL=(ALL:ALL) ALL</span><br><span class="line"></span><br><span class="line">17  <span class="comment"># Members of the admin group may gain root privileges</span></span><br><span class="line">18  %admin ALL=(ALL) ALL</span><br><span class="line"></span><br><span class="line">19  <span class="comment"># Allow members of group sudo to execute any command</span></span><br><span class="line">20  %sudo   ALL=(ALL:ALL) ALL</span><br></pre></td></tr></table></figure></li><li><p>sudo暂时切换到超级用户模式以执行超级用户权限，提示输入密码时该密码为当前用户的密码，而不是超级账户的密码。不过有时间限制，Ubuntu默认为一次时长15分钟。</p></li><li><p>由于不需要超级用户的密码，部分类Unix系统甚至利用sudo使一般用户取代超级用户作为管理帐号，例如Ubuntu、[Mac OS X]。</p><p> 系统默认创建了一个名为 sudo 的组。只要把用户加入这个组，用户就具有了 sudo 的权限。<br> 至于如何把用户加入 sudo 组，您可以直接编辑 /etc/group 文件，当然您得使用一个有 sudo 权限的用户来干这件事：</p> <figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cqd@cqd:~$ cat /etc/group</span><br><span class="line">root:x:0:</span><br><span class="line">lxd:x:117:cqd</span><br><span class="line">systemd-coredump:x:999:</span><br><span class="line">cqd:x:1000:</span><br></pre></td></tr></table></figure></li><li><p>在 ubuntu 中，sudo 的日志默认被记录在 /var/log/auth.log 文件中。当我们执行 sudo 命令时，相关日志都是会被记录下来的。root@cqd:/home/cqd# cat /var/log/auth.log</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@cqd:/home/cqd# cat /var/log/auth.log</span><br><span class="line">Apr 19 21:06:01 cqd useradd[1068]: new group: name=cqd, GID=1000</span><br><span class="line">Apr 19 21:06:01 cqd useradd[1068]: new user: name=cqd, UID=1000, GID=1000, home=/home/cqd, shell=/bin/bash, from=none</span><br><span class="line">Apr 19 21:06:01 cqd useradd[1068]: add &#x27;cqd&#x27; to group &#x27;adm&#x27;</span><br><span class="line">Apr 19 21:06:01 cqd useradd[1068]: add &#x27;cqd&#x27; to group &#x27;cdrom&#x27;</span><br></pre></td></tr></table></figure></li></ol><h2 id="sudo-su"><a href="#sudo-su" class="headerlink" title="sudo su"></a>sudo su</h2><p>根据以上的解释，sudo su就很容易理解了。</p><p>sudo su是当前用户暂时申请root权限，所以输入的不是root用户密码，而是当前用户的密码。</p><p>sudo是用户申请管理员权限执行一个操作，而此处的操作就是变成管理员。</p><p>[sudo -l]列出目前的权限。 从以下例子中就看出此用户的权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@cqd:/home/cqd<span class="comment"># sudo -l</span></span><br><span class="line">Matching Defaults entries <span class="keyword">for</span> root on cqd:</span><br><span class="line">    env_reset, mail_badpass, secure_path=/usr/local/sbin\:/usr/local/bin\:/usr/sbin\:/usr/bin\:/sbin\:/bin\:/snap/bin</span><br><span class="line"></span><br><span class="line">User root may run the following commands on cqd:</span><br><span class="line">    (ALL : ALL) ALL</span><br></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> command </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客建设的链接</title>
      <link href="/2023/04/15/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E7%9A%84%E9%93%BE%E6%8E%A5/"/>
      <url>/2023/04/15/%E5%8D%9A%E5%AE%A2%E5%BB%BA%E8%AE%BE%E7%9A%84%E9%93%BE%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>icon图标<br><a href="https://fontawesome.com/icons?from=io">https://fontawesome.com/icons?from=io</a></p><p>阿里iconfont图标<br><a href="https://www.iconfont.cn/manage/index">https://www.iconfont.cn/manage/index</a></p><p>搭建网站教程<br><a href="https://www.fomal.cc/posts/3451f874.html">https://www.fomal.cc/posts/3451f874.html</a></p><p>butterfly 外挂标签的使用<br><a href="https://www.fomal.cc/posts/2013454d.html#2-Butterfly%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE">https://www.fomal.cc/posts/2013454d.html#2-Butterfly%E5%A4%96%E6%8C%82%E6%A0%87%E7%AD%BE</a></p><p>Emoji<br><a href="https://emojipedia.org/">https://emojipedia.org/</a></p><p>添加外挂标签，在[Blogroot]\themes\butterfly\scripts\tag\目录下新建iconfont.js，打开[Blogroot]\themes\butterfly\scripts\tag\iconfont.js,输入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">iconFont</span>(<span class="params">args</span>) &#123;</span><br><span class="line">  args = args.<span class="title function_">join</span>(<span class="string">&#x27; &#x27;</span>).<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> p0 = args[<span class="number">0</span>]</span><br><span class="line">  <span class="keyword">let</span> p1 = args[<span class="number">1</span>]?args[<span class="number">1</span>]:<span class="number">1</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`&lt;svg class=&quot;icon&quot; style=&quot;width:<span class="subst">$&#123;p1&#125;</span>em; height:<span class="subst">$&#123;p1&#125;</span>em&quot; aria-hidden=&quot;true&quot;&gt;&lt;use xlink:href=&quot;#<span class="subst">$&#123;p0&#125;</span>&quot;&gt;&lt;/use&gt;&lt;/svg&gt;`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">hexo.<span class="property">extend</span>.<span class="property">tag</span>.<span class="title function_">register</span>(<span class="string">&#x27;icon&#x27;</span>,iconFont);</span><br></pre></td></tr></table></figure><p>语法示例：<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% icon icon-rat_zi %&#125;&#123;% icon icon-rat,2 %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% icon icon-ox_chou,3 %&#125;&#123;% icon icon-ox,4 %&#125;</span><br></pre></td></tr></table></figure></p><div class="note info simple"><p>info 提示块标签</p></div><div class="note warning simple"><p>warning 提示块标签</p></div>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cron表达式</title>
      <link href="/2023/04/14/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2023/04/14/cron%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="cron表达式的结构"><a href="#cron表达式的结构" class="headerlink" title="cron表达式的结构"></a>cron表达式的结构</h2><p>cron表达式是一个字符串，有5位、6位、7位之分，不同位数之间以空格分隔</p><div class="table-container"><table><thead><tr><th>位数</th><th>每位的含义</th></tr></thead><tbody><tr><td>5位：<em> </em> <em> </em> *</td><td>分、时、天、月、周</td></tr><tr><td>6位：<em> </em> <em> </em> <em> </em></td><td>秒、分、时、天、月、周</td></tr><tr><td>7位：<em> </em> <em> </em> <em> </em> *</td><td>秒、分、时、天、月、周、年</td></tr></tbody></table></div><p>其语法格式为：</p><p>“秒域 分域 时域 日域 月域 周域 年域”</p><p>在大部分情况下会省略年这一位，成为6位，省略时表示每年。再省略秒，就成为5位。</p><blockquote><p>注意：Linux中的crontab表达式只有5位。</p></blockquote><h2 id="cron每个域的取值范围"><a href="#cron每个域的取值范围" class="headerlink" title="cron每个域的取值范围"></a>cron每个域的取值范围</h2><div class="table-container"><table><thead><tr><th>域名</th><th>可取值</th><th>可取符号（仅列部分常用）</th></tr></thead><tbody><tr><td>秒域</td><td>0~59的整数</td><td>*    -    ,    /</td></tr><tr><td>分域</td><td>0~59的整数</td><td>*    -    ,    /</td></tr><tr><td>时域</td><td>0~23的整数</td><td>*    -    ,    /</td></tr><tr><td>日域</td><td>1~31的整数</td><td>*    -    ,    /    ?    L</td></tr><tr><td>月域</td><td>1~12的整数或JAN~DEC</td><td>*    -    ,    /</td></tr><tr><td>周域</td><td>1~7的整数（星期天为1）或SUN~SAT对于星期，最好使用英文缩写，更加清晰</td><td>*    -    ,    /    ?    L    #</td></tr><tr><td>年域</td><td>1970~2099的整数</td><td>*    -    ,    /</td></tr></tbody></table></div><h3 id="常用字符"><a href="#常用字符" class="headerlink" title="常用字符"></a>常用字符</h3><ul><li>【*】：每的意思。在不同的字段上，就代表每秒，每分，每小时等。</li><li>【-】：指定值的范围。比如[1-10]，在秒字段里就是每分钟的第1到10秒，在分就是每小时的第1到10分钟，以此类推。</li><li>【,】：指定某几个值。比如[2,4,5]，在秒字段里就是每分钟的第2，第4，第5秒，以此类推。</li><li>【/】：指定值的起始和增加幅度。比如[3/5]，在秒字段就是每分钟的第3秒开始，每隔5秒生效一次，也就是第3秒、8秒、13秒，以此类推。</li><li>【?】：仅用于【日】和【周】字段。因为在指定某日和周几的时候，这两个值实际上是冲突的，所以需要用<em>【?】标识不生效的字段。比如【0 1 </em> <em> </em> ?】就代表每年每月每日每小时的1分0秒触发任务。这里的周就没有效果了。</li></ul><h3 id="极少能用到的字符"><a href="#极少能用到的字符" class="headerlink" title="极少能用到的字符"></a>极少能用到的字符</h3><ul><li>SUN：仅用于【周】字段，表示星期日。也可以用数字1设置。周日到周六分别为SUN，MON，TUE，WED，THU，FRI和SAT，对应数字1，2，3，4，5，6，7。目前Quartz支持。</li><li>L：即last，用于【日】【周】字段。这里需要注意的是，在不同的字段的不同使用方式，其含义有所差别。<ul><li>用于日字段：直接使用L代表每个月的最后一天。也支持偏移量的方式，配置[L-1]则代表每月的倒数第二天。</li><li>用于周字段：直接使用L代表每周的最后一天，也就是等效于[7]或[SAT]，但是如果配合上数字，比如[7L]，则代表每个月最后一个周六，等效于[SATL]。目前Quartz支持。</li></ul></li><li>#：只能用于周域上，#后面的数字表示第几周，如果不存在这个周的值，则不执行；<ul><li>例如，”0 0 0 ? <em> 5#2”表示每个月第2个周四零点执行，”15 30 6 ? </em> 7#5”表示每个月第5个周六6:30:15执行，如果某个月不存在第5个周六，则不执行。</li></ul></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">*    *    *    *    *    *    *</span><br><span class="line">-    -    -    -    -    -    -</span><br><span class="line">|    |    |    |    |    |    |</span><br><span class="line">|    |    |    |    |    |    +----- 年域 (1970 ~ 2099)</span><br><span class="line">|    |    |    |    |    +---------- 周域 (1 ~ 7 或 SUN ~ SAT) (星期天 为1)</span><br><span class="line">|    |    |    |    +--------------- 月域 (1 ~ 12 或 JAN ~ DEC)</span><br><span class="line">|    |    |    +-------------------- 日域 (0 ~ 31)</span><br><span class="line">|    |    +------------------------- 时域 (0 ~ 23)</span><br><span class="line">|    +------------------------------ 分域 (0 ~ 59)</span><br><span class="line">+----------------------------------- 秒域 (0 ~ 59)</span><br></pre></td></tr></table></figure><h2 id="一些常用实例"><a href="#一些常用实例" class="headerlink" title="一些常用实例"></a>一些常用实例</h2><div class="table-container"><table><thead><tr><th>执行时间</th><th>cron表达式</th></tr></thead><tbody><tr><td>每隔5秒钟执行一次</td><td><em>/5  </em>  <em>  </em>  *  ?</td></tr><tr><td>每隔1分钟执行一次</td><td>0  <em>/1  </em>  <em>  </em>  ?</td></tr><tr><td>每天凌晨1点执行一次</td><td>0  0  1  <em>  </em>  ?</td></tr><tr><td>每天23点55分执行一次</td><td>0  55  23  <em>  </em>  ？</td></tr><tr><td>每月最后一天23点55分执行一次</td><td>0  55  23  L  *  ？</td></tr><tr><td>每周六9点执行一次</td><td>0  0  9  ?  *  L</td></tr><tr><td>每月最后一个周五，每隔2小时执行一次</td><td>0  0  <em>/2  ?  </em>  6L</td></tr><tr><td>每月的第三个星期五上午9:15执行一次</td><td>0  15  9  ?  *  6#3</td></tr><tr><td>在每天中午12点到12:05期间的每1分钟执行</td><td>0  0-5  12  <em>  </em>  ?</td></tr><tr><td>表示周一到周五每天上午9:15执行</td><td>0  15  9  ?  *  2-6</td></tr><tr><td>表示周一到周五每天上午9:15执行</td><td>0  15  9  ?  *  MON-FRI</td></tr><tr><td>每个月的最后一个星期五上午9:15执行</td><td>0  15  9  ?  *  6L</td></tr><tr><td>每天10点，12点，16点 各执行一次</td><td>0  0  10,12,16  <em> </em> ?</td></tr><tr><td>朝九晚五工作时间内每半小时执行一次</td><td>0  0/30  9-17  <em>  </em> ?</td></tr><tr><td>每个星期三中午12点执行一次</td><td>0  0  12  ?  *  4</td></tr><tr><td>每年三月的星期三的下午2:10和2:44各执行一次</td><td>0  10,44  14  ?  3  4　</td></tr><tr><td>每年三月的每周三的14:10分到14:44各执行一次</td><td>0  10,44  14  ?  3  WED</td></tr><tr><td>每月的第三个星期五上午10:15执行一次</td><td>0  15  10  ?  *  6#3</td></tr><tr><td>每月的第三个星期五上午10:15执行一次</td><td>0  15  10  ?  *  FRI#3</td></tr><tr><td>每分钟的第10秒与第20秒都会执行</td><td>10,20  <em>  </em>  <em>  </em> ?</td></tr><tr><td>每月一日凌晨2点30执行一次</td><td>0  30  2  1  *  ?</td></tr></tbody></table></div><h2 id="关于的cron执行时区tips"><a href="#关于的cron执行时区tips" class="headerlink" title="关于的cron执行时区tips:"></a>关于的cron执行时区tips:</h2><ol><li>Cron表达式执行时按照本地时间还是UTC时间取决于实际使用的调度程序。大多数情况下，使用本地时间。但是，一些调度程序（例如AWS Lambda）可能使用UTC时间执行Cron表达式。建议查看使用的调度程序的文档以了解其行为。</li><li><a href="http://cron.ciding.cc/">表达式生成器,可以用于验证和生成</a></li></ol><ul><li>在Linux中，Cron表达式执行通常基于系统的本地时间。这意味着Cron作业将按照与系统时区相关的本地时间执行。</li></ul><p>可以通过查看系统时区来确认。使用以下命令检查当前系统时区：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl</span><br></pre></td></tr></table></figure><br>如果需要，可以使用以下命令设置系统时区：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone [时区字符串]</span><br></pre></td></tr></table></figure><br>请注意，虽然Cron表达式执行按照本地时间执行，但依赖于系统时间，因此在改变系统时区之后，可能需要使用 systemctl restart cron 命令来重新加载Cron服务，以使Cron作业按新的时区执行。</p><ul><li><p>在Quartz.NET中，默认情况下，Cron表达式执行使用的是本地时间。这与大多数操作系统和应用程序都使用本地时间的原则一致。但是，Quartz.NET也支持使用UTC时间执行Cron表达式，因此可以根据需要进行配置。</p></li><li><p>在github Action中会提示Actions schedules run at most every 5 minutes using UTC time. 默认按照utc时间</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Basic Knowledge Of Computer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> basic knowledge of computer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo入门教程</title>
      <link href="/2023/04/14/hexo%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2023/04/14/hexo%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>看板娘</title>
      <link href="/2023/04/03/%E7%9C%8B%E6%9D%BF%E5%A8%98/"/>
      <url>/2023/04/03/%E7%9C%8B%E6%9D%BF%E5%A8%98/</url>
      
        <content type="html"><![CDATA[<p>以Butterfly主题为例，在[Blogroot]\themes\butterfly\source\目录下打开终端,输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/stevenjoezhang/live2d-widget.git live2d-widget</span><br></pre></td></tr></table></figure><br>这行指令的意思就是clone这个项目到source路径下并重命名为live2d-widget。emm，貌似本来就叫live2d-widget。反正算是一个踩坑点。如果是用下载项目压缩包，解压后放到这里的，也记得把文件夹更名为live2d-widget。</p><p>找到路径[Blogroot]\themes\butterfly\source\live2d-widget\autoload.js，打开autoload.js，修改内容：<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- const live2d_path = &quot;https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/&quot;;</span><br><span class="line">+ const live2d_path = &quot;/live2d-widget/&quot;;</span><br></pre></td></tr></table></figure><br>此处引用一下参考教程原话：autoload.js中的注释的绝对地址指的是，将资源打包放到[Blogroot]/theme/next/source中后，以[Blogroot]/theme/next/source为根目录（/）的绝对路径。</p><p>在Butterfly的主题配置文件[Blogroot]_config.butterfly.yml中,<br>butterfly主题其实自带fontawesome依赖，无需引入，<br><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Inject</span><br><span class="line">    # Insert the code to head (before &#x27;&lt;/head&gt;&#x27; tag) and the bottom (before &#x27;&lt;/body&gt;&#x27; tag)</span><br><span class="line">    # 插入代码到头部 &lt;/head&gt; 之前 和 底部 &lt;/body&gt; 之前</span><br><span class="line">    inject:</span><br><span class="line">      head:</span><br><span class="line">        # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span><br><span class="line">      bottom:</span><br><span class="line">        # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br><span class="line">+       - &lt;script defer src=&quot;/live2d-widget/autoload.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><br>保存所有文件的修改，然后照例执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><br>就能在localhost:4000看到预览了。</p><p>自定义修改</p><p>有一定前端基础的小伙伴可以通过修改[Blogroot]\themes\butterfly\source\live2d-widget路径下的样式资源文件：</p><p>waifu-tips.js:包含了按钮和对话框的逻辑</p><p>waifu-tips.json :定义了触发条件（selector，CSS 选择器）和触发时显示的文字（text）；</p><p>waifu.css:看板娘的样式表。可以对看板娘的位置布局等做自定义修改。</p>]]></content>
      
      
      <categories>
          
          <category> Blog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> butterfly </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
